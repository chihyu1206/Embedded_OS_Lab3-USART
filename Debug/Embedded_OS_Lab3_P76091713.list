
Embedded_OS_Lab3_P76091713.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c0  080053c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c8  080053c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012f14  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f24  20012f24  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012885  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002940  00000000  00000000  000328c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002201b  00000000  00000000  00037240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000139d3  00000000  00000000  0005925b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d15f8  00000000  00000000  0006cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e226  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045e0  00000000  00000000  0013e278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f4 	.word	0x080052f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080052f4 	.word	0x080052f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fa99 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f843 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8c9 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f89d 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(TaskMonitor_App, "TaskMonitor", 1024, NULL, 2, NULL);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000508:	4913      	ldr	r1, [pc, #76]	; (8000558 <main+0x74>)
 800050a:	4814      	ldr	r0, [pc, #80]	; (800055c <main+0x78>)
 800050c:	f003 fa0e 	bl	800392c <xTaskCreate>
  xTaskCreate(Green_LED_App, "Green_LED", 1024, NULL, 1, NULL);
 8000510:	2300      	movs	r3, #0
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2301      	movs	r3, #1
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800051e:	4910      	ldr	r1, [pc, #64]	; (8000560 <main+0x7c>)
 8000520:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0x80>)
 8000522:	f003 fa03 	bl	800392c <xTaskCreate>
  xTaskCreate(Red_LED_App, "Red_LED", 1024, NULL, 1, NULL);
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000534:	490c      	ldr	r1, [pc, #48]	; (8000568 <main+0x84>)
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <main+0x88>)
 8000538:	f003 f9f8 	bl	800392c <xTaskCreate>
  xTaskCreate(Delay_App,"DelayTask", 1024, NULL, 14, NULL);
 800053c:	2300      	movs	r3, #0
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	230e      	movs	r3, #14
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800054a:	4909      	ldr	r1, [pc, #36]	; (8000570 <main+0x8c>)
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <main+0x90>)
 800054e:	f003 f9ed 	bl	800392c <xTaskCreate>
  vTaskStartScheduler();
 8000552:	f003 fb5d 	bl	8003c10 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	e7fe      	b.n	8000556 <main+0x72>
 8000558:	0800530c 	.word	0x0800530c
 800055c:	08000711 	.word	0x08000711
 8000560:	08005318 	.word	0x08005318
 8000564:	08000769 	.word	0x08000769
 8000568:	08005324 	.word	0x08005324
 800056c:	0800073d 	.word	0x0800073d
 8000570:	0800532c 	.word	0x0800532c
 8000574:	08000795 	.word	0x08000795

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fe90 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xb4>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xb4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <SystemClock_Config+0xb8>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <SystemClock_Config+0xb8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fd0d 	bl	8001008 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f4:	f000 f8ea 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f000 ff70 	bl	80014f8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061e:	f000 f8d5 	bl	80007cc <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fc04 	bl	8001e78 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8a9 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000002c 	.word	0x2000002c
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_GPIO_Init+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_GPIO_Init+0x80>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_GPIO_Init+0x80>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <MX_GPIO_Init+0x80>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_GPIO_Init+0x80>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0x84>)
 80006de:	f000 fc5f 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin;
 80006e2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x84>)
 80006fc:	f000 fab4 	bl	8000c68 <HAL_GPIO_Init>

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020c00 	.word	0x40020c00

08000710 <TaskMonitor_App>:

/* USER CODE BEGIN 4 */
void TaskMonitor_App(void *pvParameters) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint32_t timer = 100;
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	60fb      	str	r3, [r7, #12]
	while (1) {
		Taskmonitor();
 800071c:	f004 f868 	bl	80047f0 <Taskmonitor>
		++timer;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
		vTaskDelay(timer);
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f003 fa3e 	bl	8003ba8 <vTaskDelay>
		if (timer == 500)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000732:	d1f3      	bne.n	800071c <TaskMonitor_App+0xc>
			timer = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
		Taskmonitor();
 8000738:	e7f0      	b.n	800071c <TaskMonitor_App+0xc>
	...

0800073c <Red_LED_App>:
	}
}

void Red_LED_App(void *pvParameters) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint32_t red_timer = 500;
 8000744:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000748:	60fb      	str	r3, [r7, #12]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, Red_LED_Pin);
 800074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <Red_LED_App+0x28>)
 8000750:	f000 fc3f 	bl	8000fd2 <HAL_GPIO_TogglePin>
		vTaskDelay(red_timer);
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f003 fa27 	bl	8003ba8 <vTaskDelay>
		red_timer++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD, Red_LED_Pin);
 8000760:	e7f3      	b.n	800074a <Red_LED_App+0xe>
 8000762:	bf00      	nop
 8000764:	40020c00 	.word	0x40020c00

08000768 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint32_t green_timer = 500;
 8000770:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000774:	60fb      	str	r3, [r7, #12]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, Green_LED_Pin);
 8000776:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <Green_LED_App+0x28>)
 800077c:	f000 fc29 	bl	8000fd2 <HAL_GPIO_TogglePin>
		vTaskDelay(green_timer);
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f003 fa11 	bl	8003ba8 <vTaskDelay>
		green_timer += 2;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3302      	adds	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD, Green_LED_Pin);
 800078c:	e7f3      	b.n	8000776 <Green_LED_App+0xe>
 800078e:	bf00      	nop
 8000790:	40020c00 	.word	0x40020c00

08000794 <Delay_App>:
	}
}

void Delay_App(void *pvParameters) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	while (1)
		vTaskDelay(15000);
 800079c:	f643 2098 	movw	r0, #15000	; 0x3a98
 80007a0:	f003 fa02 	bl	8003ba8 <vTaskDelay>
 80007a4:	e7fa      	b.n	800079c <Delay_App+0x8>
	...

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f953 	bl	8000a64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40001400 	.word	0x40001400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a19      	ldr	r2, [pc, #100]	; (80008ac <HAL_UART_MspInit+0x84>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12b      	bne.n	80008a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800089e:	f000 f9e3 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2037      	movs	r0, #55	; 0x37
 80008ce:	f000 f9a1 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008d2:	2037      	movs	r0, #55	; 0x37
 80008d4:	f000 f9ba 	bl	8000c4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_InitTick+0xa0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <HAL_InitTick+0xa0>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_InitTick+0xa0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 ffda 	bl	80018b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000904:	f000 ffb0 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8000908:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <HAL_InitTick+0xa4>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0c9b      	lsrs	r3, r3, #18
 8000914:	3b01      	subs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_InitTick+0xa8>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <HAL_InitTick+0xac>)
 800091c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_InitTick+0xa8>)
 8000920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000924:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_InitTick+0xa8>)
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_InitTick+0xa8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_InitTick+0xa8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <HAL_InitTick+0xa8>)
 800093a:	f000 ffef 	bl	800191c <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_InitTick+0xa8>)
 8000946:	f001 f843 	bl	80019d0 <HAL_TIM_Base_Start_IT>
 800094a:	4603      	mov	r3, r0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3730      	adds	r7, #48	; 0x30
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000070 	.word	0x20000070
 8000964:	40001400 	.word	0x40001400

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM7_IRQHandler+0x10>)
 800099a:	f001 f889 	bl	8001ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f004 fc25 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd71 	bl	80004e4 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a10:	080053d0 	.word	0x080053d0
  ldr r2, =_sbss
 8000a14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a18:	20012f24 	.word	0x20012f24

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f8d8 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ff32 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fec0 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	200000b8 	.word	0x200000b8

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	200000b8 	.word	0x200000b8

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6978      	ldr	r0, [r7, #20]
 8000c32:	f7ff ffb1 	bl	8000b98 <NVIC_EncodePriority>
 8000c36:	4602      	mov	r2, r0
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff80 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff54 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e16b      	b.n	8000f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 815a 	bne.w	8000f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80b4 	beq.w	8000f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b60      	ldr	r3, [pc, #384]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a5f      	ldr	r2, [pc, #380]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <HAL_GPIO_Init+0x30c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <HAL_GPIO_Init+0x314>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x226>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x318>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x222>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x31c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x21e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_GPIO_Init+0x320>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x216>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <HAL_GPIO_Init+0x328>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x212>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_GPIO_Init+0x32c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x20e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	; (8000f98 <HAL_GPIO_Init+0x330>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20a>
 8000e6e:	2307      	movs	r3, #7
 8000e70:	e00e      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e72:	2308      	movs	r3, #8
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x228>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea0:	4935      	ldr	r1, [pc, #212]	; (8000f78 <HAL_GPIO_Init+0x310>)
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x334>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	f67f ae90 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40021400 	.word	0x40021400
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40021c00 	.word	0x40021c00
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	041a      	lsls	r2, r3, #16
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e267      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d075      	beq.n	8001112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b04      	cmp	r3, #4
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001032:	4b85      	ldr	r3, [pc, #532]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800103a:	2b08      	cmp	r3, #8
 800103c:	d112      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4b82      	ldr	r3, [pc, #520]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800104a:	d10b      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	4b7e      	ldr	r3, [pc, #504]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d05b      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d157      	bne.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e242      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x74>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 80010a0:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a68      	ldr	r2, [pc, #416]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b66      	ldr	r3, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a65      	ldr	r2, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fce4 	bl	8000a8c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fce0 	bl	8000a8c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e207      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcd0 	bl	8000a8c <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fccc 	bl	8000a8c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1f3      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b51      	ldr	r3, [pc, #324]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112a:	4b47      	ldr	r3, [pc, #284]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b44      	ldr	r3, [pc, #272]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c7      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_RCC_OscConfig+0x244>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fc85 	bl	8000a8c <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fc81 	bl	8000a8c <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a8      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_RCC_OscConfig+0x244>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc64 	bl	8000a8c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fc60 	bl	8000a8c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e187      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d016      	beq.n	8001228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff fc44 	bl	8000a8c <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fc40 	bl	8000a8c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e167      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x240>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x200>
 8001226:	e01b      	b.n	8001260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_RCC_OscConfig+0x248>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fc2d 	bl	8000a8c <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	e00e      	b.n	8001254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fc29 	bl	8000a8c <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d907      	bls.n	8001254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e150      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001248:	40023800 	.word	0x40023800
 800124c:	42470000 	.word	0x42470000
 8001250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ea      	bne.n	8001236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8097 	beq.w	800139c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a7c      	ldr	r2, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b7a      	ldr	r3, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b77      	ldr	r3, [pc, #476]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a73      	ldr	r2, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fbe9 	bl	8000a8c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fbe5 	bl	8000a8c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e10c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <HAL_RCC_OscConfig+0x474>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e8:	4a63      	ldr	r2, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	; 0x70
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x30c>
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	; 0x70
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	4a5b      	ldr	r2, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 8001314:	4b58      	ldr	r3, [pc, #352]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a57      	ldr	r2, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fbaa 	bl	8000a8c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fba6 	bl	8000a8c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0cb      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0ee      	beq.n	800133c <HAL_RCC_OscConfig+0x334>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fb94 	bl	8000a8c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fb90 	bl	8000a8c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0b5      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ee      	bne.n	8001368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	4a38      	ldr	r2, [pc, #224]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a1 	beq.w	80014e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d05c      	beq.n	800146c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d141      	bne.n	800143e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb64 	bl	8000a8c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fb60 	bl	8000a8c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e087      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb39 	bl	8000a8c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb35 	bl	8000a8c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e05c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x416>
 800143c:	e054      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb22 	bl	8000a8c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fb1e 	bl	8000a8c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e045      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e038      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d028      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d121      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d11a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014bc:	4293      	cmp	r3, r2
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0cc      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d90c      	bls.n	8001534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d044      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e067      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff fa50 	bl	8000a8c <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff fa4c 	bl	8000a8c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e04f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20c      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f90a 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	080053a8 	.word	0x080053a8
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b090      	sub	sp, #64	; 0x40
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80a1 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x16c>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e09b      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_GetSysClockFreq+0x184>)
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016fc:	e09b      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001702:	e098      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170e:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d028      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	627a      	str	r2, [r7, #36]	; 0x24
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800172c:	2100      	movs	r1, #0
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 8001730:	fb03 f201 	mul.w	r2, r3, r1
 8001734:	2300      	movs	r3, #0
 8001736:	fb00 f303 	mul.w	r3, r0, r3
 800173a:	4413      	add	r3, r2
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 800173e:	fba0 1202 	umull	r1, r2, r0, r2
 8001742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001744:	460a      	mov	r2, r1
 8001746:	62ba      	str	r2, [r7, #40]	; 0x28
 8001748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174a:	4413      	add	r3, r2
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	2200      	movs	r2, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	61fa      	str	r2, [r7, #28]
 8001756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800175e:	f7fe fd3f 	bl	80001e0 <__aeabi_uldivmod>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4613      	mov	r3, r2
 8001768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800176a:	e053      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	2200      	movs	r2, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	617a      	str	r2, [r7, #20]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800177e:	f04f 0b00 	mov.w	fp, #0
 8001782:	4652      	mov	r2, sl
 8001784:	465b      	mov	r3, fp
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ebb2 080a 	subs.w	r8, r2, sl
 800179e:	eb63 090b 	sbc.w	r9, r3, fp
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017b6:	ebb2 0408 	subs.w	r4, r2, r8
 80017ba:	eb63 0509 	sbc.w	r5, r3, r9
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	00eb      	lsls	r3, r5, #3
 80017c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017cc:	00e2      	lsls	r2, r4, #3
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	eb14 030a 	adds.w	r3, r4, sl
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	eb45 030b 	adc.w	r3, r5, fp
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fe:	2200      	movs	r2, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001808:	f7fe fcea 	bl	80001e0 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetSysClockFreq+0x184>)
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001838:	4618      	mov	r0, r3
 800183a:	3740      	adds	r7, #64	; 0x40
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	017d7840 	.word	0x017d7840

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_GetHCLKFreq+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000000 	.word	0x20000000

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800186c:	f7ff fff0 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001870:	4602      	mov	r2, r0
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	0a9b      	lsrs	r3, r3, #10
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	4903      	ldr	r1, [pc, #12]	; (800188c <HAL_RCC_GetPCLK1Freq+0x24>)
 800187e:	5ccb      	ldrb	r3, [r1, r3]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	080053b8 	.word	0x080053b8

08001890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001894:	f7ff ffdc 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0b5b      	lsrs	r3, r3, #13
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	080053b8 	.word	0x080053b8

080018b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	220f      	movs	r2, #15
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_RCC_GetClockConfig+0x60>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0207 	and.w	r2, r3, #7
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	601a      	str	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e041      	b.n	80019b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f839 	bl	80019ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 f9d8 	bl	8001d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d001      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04e      	b.n	8001a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d022      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a12:	d01d      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d018      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00e      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d009      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d004      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x80>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_TIM_Base_Start_IT+0xdc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d111      	bne.n	8001a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d010      	beq.n	8001a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a72:	e007      	b.n	8001a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40010400 	.word	0x40010400
 8001aa8:	40014000 	.word	0x40014000
 8001aac:	40001800 	.word	0x40001800

08001ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d122      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d11b      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f06f 0202 	mvn.w	r2, #2
 8001adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8ee 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001af8:	e005      	b.n	8001b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8e0 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8f1 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d122      	bne.n	8001b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d11b      	bne.n	8001b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0204 	mvn.w	r2, #4
 8001b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f8c4 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001b4c:	e005      	b.n	8001b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8b6 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f8c7 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d122      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0208 	mvn.w	r2, #8
 8001b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f89a 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f88c 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f89d 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0210 	mvn.w	r2, #16
 8001bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f870 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f862 	bl	8001cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f873 	bl	8001ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0201 	mvn.w	r2, #1
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe fdba 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	2b80      	cmp	r3, #128	; 0x80
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f902 	bl	8001e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d10e      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b40      	cmp	r3, #64	; 0x40
 8001c7a:	d107      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f838 	bl	8001cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d107      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0220 	mvn.w	r2, #32
 8001cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8cc 	bl	8001e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <TIM_Base_SetConfig+0x114>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <TIM_Base_SetConfig+0x40>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2e:	d00f      	beq.n	8001d50 <TIM_Base_SetConfig+0x40>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a3d      	ldr	r2, [pc, #244]	; (8001e28 <TIM_Base_SetConfig+0x118>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00b      	beq.n	8001d50 <TIM_Base_SetConfig+0x40>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <TIM_Base_SetConfig+0x11c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <TIM_Base_SetConfig+0x40>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <TIM_Base_SetConfig+0x120>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d003      	beq.n	8001d50 <TIM_Base_SetConfig+0x40>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <TIM_Base_SetConfig+0x124>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d108      	bne.n	8001d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <TIM_Base_SetConfig+0x114>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d02b      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d027      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <TIM_Base_SetConfig+0x118>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d023      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <TIM_Base_SetConfig+0x11c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <TIM_Base_SetConfig+0x120>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01b      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <TIM_Base_SetConfig+0x124>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d017      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <TIM_Base_SetConfig+0x128>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <TIM_Base_SetConfig+0x12c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00f      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <TIM_Base_SetConfig+0x130>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00b      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <TIM_Base_SetConfig+0x134>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <TIM_Base_SetConfig+0x138>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <TIM_Base_SetConfig+0xb2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <TIM_Base_SetConfig+0x13c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <TIM_Base_SetConfig+0x114>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <TIM_Base_SetConfig+0xf8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <TIM_Base_SetConfig+0x124>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d103      	bne.n	8001e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	615a      	str	r2, [r3, #20]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40010400 	.word	0x40010400
 8001e38:	40014000 	.word	0x40014000
 8001e3c:	40014400 	.word	0x40014400
 8001e40:	40014800 	.word	0x40014800
 8001e44:	40001800 	.word	0x40001800
 8001e48:	40001c00 	.word	0x40001c00
 8001e4c:	40002000 	.word	0x40002000

08001e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e03f      	b.n	8001f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fcc2 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f929 	bl	8002114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b08a      	sub	sp, #40	; 0x28
 8001f16:	af02      	add	r7, sp, #8
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d17c      	bne.n	800202c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_UART_Transmit+0x2c>
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e075      	b.n	800202e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_UART_Transmit+0x3e>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e06e      	b.n	800202e <HAL_UART_Transmit+0x11c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f66:	f7fe fd91 	bl	8000a8c <HAL_GetTick>
 8001f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f80:	d108      	bne.n	8001f94 <HAL_UART_Transmit+0x82>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d104      	bne.n	8001f94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	e003      	b.n	8001f9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fa4:	e02a      	b.n	8001ffc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f840 	bl	8002036 <UART_WaitOnFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e036      	b.n	800202e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10b      	bne.n	8001fde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	e007      	b.n	8001fee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	3301      	adds	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1cf      	bne.n	8001fa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f810 	bl	8002036 <UART_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e006      	b.n	800202e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	e000      	b.n	800202e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800202c:	2302      	movs	r3, #2
  }
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b090      	sub	sp, #64	; 0x40
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002046:	e050      	b.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204e:	d04c      	beq.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <UART_WaitOnFlagUntilTimeout+0x30>
 8002056:	f7fe fd19 	bl	8000a8c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002062:	429a      	cmp	r2, r3
 8002064:	d241      	bcs.n	80020ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	330c      	adds	r3, #12
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	e853 3f00 	ldrex	r3, [r3]
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	330c      	adds	r3, #12
 8002084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002086:	637a      	str	r2, [r7, #52]	; 0x34
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800208c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800208e:	e841 2300 	strex	r3, r2, [r1]
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e5      	bne.n	8002066 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3314      	adds	r3, #20
 80020a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	613b      	str	r3, [r7, #16]
   return(result);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3314      	adds	r3, #20
 80020b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ba:	623a      	str	r2, [r7, #32]
 80020bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	69f9      	ldr	r1, [r7, #28]
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e5      	bne.n	800209a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e00f      	b.n	800210a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d09f      	beq.n	8002048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3740      	adds	r7, #64	; 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b0c0      	sub	sp, #256	; 0x100
 800211a:	af00      	add	r7, sp, #0
 800211c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800212c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	ea40 0301 	orr.w	r3, r0, r1
 800213c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	431a      	orrs	r2, r3
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	431a      	orrs	r2, r3
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800216c:	f021 010c 	bic.w	r1, r1, #12
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800217a:	430b      	orrs	r3, r1
 800217c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800217e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	6999      	ldr	r1, [r3, #24]
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	ea40 0301 	orr.w	r3, r0, r1
 800219a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b8f      	ldr	r3, [pc, #572]	; (80023e0 <UART_SetConfig+0x2cc>)
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d005      	beq.n	80021b4 <UART_SetConfig+0xa0>
 80021a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b8d      	ldr	r3, [pc, #564]	; (80023e4 <UART_SetConfig+0x2d0>)
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d104      	bne.n	80021be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fb6c 	bl	8001890 <HAL_RCC_GetPCLK2Freq>
 80021b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021bc:	e003      	b.n	80021c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021be:	f7ff fb53 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 80021c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d0:	f040 810c 	bne.w	80023ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021e6:	4622      	mov	r2, r4
 80021e8:	462b      	mov	r3, r5
 80021ea:	1891      	adds	r1, r2, r2
 80021ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80021ee:	415b      	adcs	r3, r3
 80021f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021f6:	4621      	mov	r1, r4
 80021f8:	eb12 0801 	adds.w	r8, r2, r1
 80021fc:	4629      	mov	r1, r5
 80021fe:	eb43 0901 	adc.w	r9, r3, r1
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002216:	4690      	mov	r8, r2
 8002218:	4699      	mov	r9, r3
 800221a:	4623      	mov	r3, r4
 800221c:	eb18 0303 	adds.w	r3, r8, r3
 8002220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002224:	462b      	mov	r3, r5
 8002226:	eb49 0303 	adc.w	r3, r9, r3
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800223a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800223e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002242:	460b      	mov	r3, r1
 8002244:	18db      	adds	r3, r3, r3
 8002246:	653b      	str	r3, [r7, #80]	; 0x50
 8002248:	4613      	mov	r3, r2
 800224a:	eb42 0303 	adc.w	r3, r2, r3
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
 8002250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002258:	f7fd ffc2 	bl	80001e0 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <UART_SetConfig+0x2d4>)
 8002262:	fba3 2302 	umull	r2, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	011c      	lsls	r4, r3, #4
 800226a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	1891      	adds	r1, r2, r2
 8002282:	64b9      	str	r1, [r7, #72]	; 0x48
 8002284:	415b      	adcs	r3, r3
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800228c:	4641      	mov	r1, r8
 800228e:	eb12 0a01 	adds.w	sl, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb43 0b01 	adc.w	fp, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ac:	4692      	mov	sl, r2
 80022ae:	469b      	mov	fp, r3
 80022b0:	4643      	mov	r3, r8
 80022b2:	eb1a 0303 	adds.w	r3, sl, r3
 80022b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022ba:	464b      	mov	r3, r9
 80022bc:	eb4b 0303 	adc.w	r3, fp, r3
 80022c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022d8:	460b      	mov	r3, r1
 80022da:	18db      	adds	r3, r3, r3
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
 80022de:	4613      	mov	r3, r2
 80022e0:	eb42 0303 	adc.w	r3, r2, r3
 80022e4:	647b      	str	r3, [r7, #68]	; 0x44
 80022e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022ee:	f7fd ff77 	bl	80001e0 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <UART_SetConfig+0x2d4>)
 80022fa:	fba3 2301 	umull	r2, r3, r3, r1
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	1acb      	subs	r3, r1, r3
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <UART_SetConfig+0x2d4>)
 8002310:	fba3 2302 	umull	r2, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800231c:	441c      	add	r4, r3
 800231e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800232c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002330:	4642      	mov	r2, r8
 8002332:	464b      	mov	r3, r9
 8002334:	1891      	adds	r1, r2, r2
 8002336:	63b9      	str	r1, [r7, #56]	; 0x38
 8002338:	415b      	adcs	r3, r3
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002340:	4641      	mov	r1, r8
 8002342:	1851      	adds	r1, r2, r1
 8002344:	6339      	str	r1, [r7, #48]	; 0x30
 8002346:	4649      	mov	r1, r9
 8002348:	414b      	adcs	r3, r1
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002358:	4659      	mov	r1, fp
 800235a:	00cb      	lsls	r3, r1, #3
 800235c:	4651      	mov	r1, sl
 800235e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002362:	4651      	mov	r1, sl
 8002364:	00ca      	lsls	r2, r1, #3
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	4603      	mov	r3, r0
 800236c:	4642      	mov	r2, r8
 800236e:	189b      	adds	r3, r3, r2
 8002370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002374:	464b      	mov	r3, r9
 8002376:	460a      	mov	r2, r1
 8002378:	eb42 0303 	adc.w	r3, r2, r3
 800237c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800238c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002394:	460b      	mov	r3, r1
 8002396:	18db      	adds	r3, r3, r3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
 800239a:	4613      	mov	r3, r2
 800239c:	eb42 0303 	adc.w	r3, r2, r3
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023aa:	f7fd ff19 	bl	80001e0 <__aeabi_uldivmod>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <UART_SetConfig+0x2d4>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	2164      	movs	r1, #100	; 0x64
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	3332      	adds	r3, #50	; 0x32
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <UART_SetConfig+0x2d4>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4422      	add	r2, r4
 80023da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023dc:	e105      	b.n	80025ea <UART_SetConfig+0x4d6>
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40011400 	.word	0x40011400
 80023e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f0:	2200      	movs	r2, #0
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023fe:	4642      	mov	r2, r8
 8002400:	464b      	mov	r3, r9
 8002402:	1891      	adds	r1, r2, r2
 8002404:	6239      	str	r1, [r7, #32]
 8002406:	415b      	adcs	r3, r3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800240e:	4641      	mov	r1, r8
 8002410:	1854      	adds	r4, r2, r1
 8002412:	4649      	mov	r1, r9
 8002414:	eb43 0501 	adc.w	r5, r3, r1
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	00eb      	lsls	r3, r5, #3
 8002422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	4614      	mov	r4, r2
 800242a:	461d      	mov	r5, r3
 800242c:	4643      	mov	r3, r8
 800242e:	18e3      	adds	r3, r4, r3
 8002430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002434:	464b      	mov	r3, r9
 8002436:	eb45 0303 	adc.w	r3, r5, r3
 800243a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800244a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800245a:	4629      	mov	r1, r5
 800245c:	008b      	lsls	r3, r1, #2
 800245e:	4621      	mov	r1, r4
 8002460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002464:	4621      	mov	r1, r4
 8002466:	008a      	lsls	r2, r1, #2
 8002468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800246c:	f7fd feb8 	bl	80001e0 <__aeabi_uldivmod>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002476:	fba3 2302 	umull	r2, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	011c      	lsls	r4, r3, #4
 800247e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800248c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002490:	4642      	mov	r2, r8
 8002492:	464b      	mov	r3, r9
 8002494:	1891      	adds	r1, r2, r2
 8002496:	61b9      	str	r1, [r7, #24]
 8002498:	415b      	adcs	r3, r3
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a0:	4641      	mov	r1, r8
 80024a2:	1851      	adds	r1, r2, r1
 80024a4:	6139      	str	r1, [r7, #16]
 80024a6:	4649      	mov	r1, r9
 80024a8:	414b      	adcs	r3, r1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b8:	4659      	mov	r1, fp
 80024ba:	00cb      	lsls	r3, r1, #3
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c2:	4651      	mov	r1, sl
 80024c4:	00ca      	lsls	r2, r1, #3
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	4642      	mov	r2, r8
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d4:	464b      	mov	r3, r9
 80024d6:	460a      	mov	r2, r1
 80024d8:	eb42 0303 	adc.w	r3, r2, r3
 80024dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024f8:	4649      	mov	r1, r9
 80024fa:	008b      	lsls	r3, r1, #2
 80024fc:	4641      	mov	r1, r8
 80024fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002502:	4641      	mov	r1, r8
 8002504:	008a      	lsls	r2, r1, #2
 8002506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800250a:	f7fd fe69 	bl	80001e0 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002514:	fba3 1302 	umull	r1, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2164      	movs	r1, #100	; 0x64
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <UART_SetConfig+0x4e4>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002532:	441c      	add	r4, r3
 8002534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002538:	2200      	movs	r2, #0
 800253a:	673b      	str	r3, [r7, #112]	; 0x70
 800253c:	677a      	str	r2, [r7, #116]	; 0x74
 800253e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002542:	4642      	mov	r2, r8
 8002544:	464b      	mov	r3, r9
 8002546:	1891      	adds	r1, r2, r2
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	415b      	adcs	r3, r3
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002552:	4641      	mov	r1, r8
 8002554:	1851      	adds	r1, r2, r1
 8002556:	6039      	str	r1, [r7, #0]
 8002558:	4649      	mov	r1, r9
 800255a:	414b      	adcs	r3, r1
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800256a:	4659      	mov	r1, fp
 800256c:	00cb      	lsls	r3, r1, #3
 800256e:	4651      	mov	r1, sl
 8002570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002574:	4651      	mov	r1, sl
 8002576:	00ca      	lsls	r2, r1, #3
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	4603      	mov	r3, r0
 800257e:	4642      	mov	r2, r8
 8002580:	189b      	adds	r3, r3, r2
 8002582:	66bb      	str	r3, [r7, #104]	; 0x68
 8002584:	464b      	mov	r3, r9
 8002586:	460a      	mov	r2, r1
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
 8002598:	667a      	str	r2, [r7, #100]	; 0x64
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025a6:	4649      	mov	r1, r9
 80025a8:	008b      	lsls	r3, r1, #2
 80025aa:	4641      	mov	r1, r8
 80025ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b0:	4641      	mov	r1, r8
 80025b2:	008a      	lsls	r2, r1, #2
 80025b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025b8:	f7fd fe12 	bl	80001e0 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <UART_SetConfig+0x4e4>)
 80025c2:	fba3 1302 	umull	r1, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2164      	movs	r1, #100	; 0x64
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <UART_SetConfig+0x4e4>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4422      	add	r2, r4
 80025e8:	609a      	str	r2, [r3, #8]
}
 80025ea:	bf00      	nop
 80025ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025f0:	46bd      	mov	sp, r7
 80025f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f6:	bf00      	nop
 80025f8:	51eb851f 	.word	0x51eb851f

080025fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3b04      	subs	r3, #4
 800260c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b04      	subs	r3, #4
 800261a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0201 	bic.w	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b04      	subs	r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <pxPortInitialiseStack+0x64>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3b14      	subs	r3, #20
 8002636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3b04      	subs	r3, #4
 8002642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f06f 0202 	mvn.w	r2, #2
 800264a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3b20      	subs	r3, #32
 8002650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	08002665 	.word	0x08002665

08002664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <prvTaskExitError+0x54>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002676:	d00a      	beq.n	800268e <prvTaskExitError+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <prvTaskExitError+0x28>
	__asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	60bb      	str	r3, [r7, #8]
}
 80026a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026a2:	bf00      	nop
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0fc      	beq.n	80026a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	00000000 	.word	0x00000000

080026c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <pxCurrentTCBConst2>)
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	6808      	ldr	r0, [r1, #0]
 80026c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ca:	f380 8809 	msr	PSP, r0
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	f380 8811 	msr	BASEPRI, r0
 80026da:	4770      	bx	lr
 80026dc:	f3af 8000 	nop.w

080026e0 <pxCurrentTCBConst2>:
 80026e0:	20012d1c 	.word	0x20012d1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop

080026e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026e8:	4808      	ldr	r0, [pc, #32]	; (800270c <prvPortStartFirstTask+0x24>)
 80026ea:	6800      	ldr	r0, [r0, #0]
 80026ec:	6800      	ldr	r0, [r0, #0]
 80026ee:	f380 8808 	msr	MSP, r0
 80026f2:	f04f 0000 	mov.w	r0, #0
 80026f6:	f380 8814 	msr	CONTROL, r0
 80026fa:	b662      	cpsie	i
 80026fc:	b661      	cpsie	f
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	df00      	svc	0
 8002708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800270a:	bf00      	nop
 800270c:	e000ed08 	.word	0xe000ed08

08002710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <xPortStartScheduler+0x140>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <xPortStartScheduler+0x144>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d10a      	bne.n	8002736 <xPortStartScheduler+0x26>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	61bb      	str	r3, [r7, #24]
}
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <xPortStartScheduler+0x140>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a47      	ldr	r2, [pc, #284]	; (8002858 <xPortStartScheduler+0x148>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10a      	bne.n	8002756 <xPortStartScheduler+0x46>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	617b      	str	r3, [r7, #20]
}
 8002752:	bf00      	nop
 8002754:	e7fe      	b.n	8002754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <xPortStartScheduler+0x14c>)
 8002758:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <xPortStartScheduler+0x150>)
 800277c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <xPortStartScheduler+0x154>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002784:	e009      	b.n	800279a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <xPortStartScheduler+0x154>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	4a35      	ldr	r2, [pc, #212]	; (8002864 <xPortStartScheduler+0x154>)
 800278e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	2b80      	cmp	r3, #128	; 0x80
 80027a4:	d0ef      	beq.n	8002786 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <xPortStartScheduler+0x154>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d00a      	beq.n	80027c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	613b      	str	r3, [r7, #16]
}
 80027c4:	bf00      	nop
 80027c6:	e7fe      	b.n	80027c6 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80027c8:	4b26      	ldr	r3, [pc, #152]	; (8002864 <xPortStartScheduler+0x154>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1c3 0307 	rsb	r3, r3, #7
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d00a      	beq.n	80027ea <xPortStartScheduler+0xda>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60fb      	str	r3, [r7, #12]
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <xPortStartScheduler+0x154>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <xPortStartScheduler+0x154>)
 80027f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <xPortStartScheduler+0x154>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <xPortStartScheduler+0x154>)
 80027fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <xPortStartScheduler+0x158>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <xPortStartScheduler+0x158>)
 800280e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002812:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <xPortStartScheduler+0x158>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <xPortStartScheduler+0x158>)
 800281a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800281e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002820:	f000 f8dc 	bl	80029dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <xPortStartScheduler+0x15c>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800282a:	f000 f8fb 	bl	8002a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <xPortStartScheduler+0x160>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <xPortStartScheduler+0x160>)
 8002834:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002838:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800283a:	f7ff ff55 	bl	80026e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800283e:	f001 fba7 	bl	8003f90 <vTaskSwitchContext>
	prvTaskExitError();
 8002842:	f7ff ff0f 	bl	8002664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	410fc271 	.word	0x410fc271
 8002858:	410fc270 	.word	0x410fc270
 800285c:	e000e400 	.word	0xe000e400
 8002860:	200000bc 	.word	0x200000bc
 8002864:	200000c0 	.word	0x200000c0
 8002868:	e000ed20 	.word	0xe000ed20
 800286c:	2000000c 	.word	0x2000000c
 8002870:	e000ef34 	.word	0xe000ef34

08002874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	607b      	str	r3, [r7, #4]
}
 800288c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <vPortEnterCritical+0x58>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <vPortEnterCritical+0x58>)
 8002896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <vPortEnterCritical+0x58>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10f      	bne.n	80028c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <vPortEnterCritical+0x5c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	603b      	str	r3, [r7, #0]
}
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <vPortEnterCritical+0x4a>
	}
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	2000000c 	.word	0x2000000c
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <vPortExitCritical+0x50>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <vPortExitCritical+0x24>
	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	607b      	str	r3, [r7, #4]
}
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <vPortExitCritical+0x50>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	4a09      	ldr	r2, [pc, #36]	; (8002924 <vPortExitCritical+0x50>)
 8002900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <vPortExitCritical+0x50>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <vPortExitCritical+0x42>
 800290a:	2300      	movs	r3, #0
 800290c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000000c 	.word	0x2000000c
	...

08002930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002930:	f3ef 8009 	mrs	r0, PSP
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <pxCurrentTCBConst>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f01e 0f10 	tst.w	lr, #16
 8002940:	bf08      	it	eq
 8002942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800294a:	6010      	str	r0, [r2, #0]
 800294c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002954:	f380 8811 	msr	BASEPRI, r0
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f001 fb16 	bl	8003f90 <vTaskSwitchContext>
 8002964:	f04f 0000 	mov.w	r0, #0
 8002968:	f380 8811 	msr	BASEPRI, r0
 800296c:	bc09      	pop	{r0, r3}
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	6808      	ldr	r0, [r1, #0]
 8002972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002976:	f01e 0f10 	tst.w	lr, #16
 800297a:	bf08      	it	eq
 800297c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002980:	f380 8809 	msr	PSP, r0
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w

08002990 <pxCurrentTCBConst>:
 8002990:	20012d1c 	.word	0x20012d1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop

08002998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
	__asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	607b      	str	r3, [r7, #4]
}
 80029b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029b2:	f001 fa35 	bl	8003e20 <xTaskIncrementTick>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <SysTick_Handler+0x40>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f383 8811 	msr	BASEPRI, r3
}
 80029ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed04 	.word	0xe000ed04

080029dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <vPortSetupTimerInterrupt+0x34>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <vPortSetupTimerInterrupt+0x38>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <vPortSetupTimerInterrupt+0x3c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <vPortSetupTimerInterrupt+0x40>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <vPortSetupTimerInterrupt+0x44>)
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <vPortSetupTimerInterrupt+0x34>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010
 8002a14:	e000e018 	.word	0xe000e018
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	10624dd3 	.word	0x10624dd3
 8002a20:	e000e014 	.word	0xe000e014

08002a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a34 <vPortEnableVFP+0x10>
 8002a28:	6801      	ldr	r1, [r0, #0]
 8002a2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a2e:	6001      	str	r1, [r0, #0]
 8002a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002a32:	bf00      	nop
 8002a34:	e000ed88 	.word	0xe000ed88

08002a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002a3e:	f3ef 8305 	mrs	r3, IPSR
 8002a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	d914      	bls.n	8002a74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <vPortValidateInterruptPriority+0x70>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <vPortValidateInterruptPriority+0x74>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	7afa      	ldrb	r2, [r7, #11]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20a      	bcs.n	8002a74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	607b      	str	r3, [r7, #4]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <vPortValidateInterruptPriority+0x78>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <vPortValidateInterruptPriority+0x7c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d90a      	bls.n	8002a9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	603b      	str	r3, [r7, #0]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <vPortValidateInterruptPriority+0x60>
	}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e3f0 	.word	0xe000e3f0
 8002aac:	200000bc 	.word	0x200000bc
 8002ab0:	e000ed0c 	.word	0xe000ed0c
 8002ab4:	200000c0 	.word	0x200000c0

08002ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ac4:	f001 f8f2 	bl	8003cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <pvPortMalloc+0x174>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ad0:	f000 f910 	bl	8002cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ad4:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <pvPortMalloc+0x178>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 808e 	bne.w	8002bfe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01d      	beq.n	8002b24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002ae8:	2208      	movs	r2, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d014      	beq.n	8002b24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f023 0307 	bic.w	r3, r3, #7
 8002b00:	3308      	adds	r3, #8
 8002b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <pvPortMalloc+0x6c>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	617b      	str	r3, [r7, #20]
}
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d069      	beq.n	8002bfe <pvPortMalloc+0x146>
 8002b2a:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <pvPortMalloc+0x17c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d864      	bhi.n	8002bfe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b34:	4b40      	ldr	r3, [pc, #256]	; (8002c38 <pvPortMalloc+0x180>)
 8002b36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <pvPortMalloc+0x180>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b3e:	e004      	b.n	8002b4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d903      	bls.n	8002b5c <pvPortMalloc+0xa4>
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f1      	bne.n	8002b40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <pvPortMalloc+0x174>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d04b      	beq.n	8002bfe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	2308      	movs	r3, #8
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d91f      	bls.n	8002bc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <pvPortMalloc+0xf8>
	__asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	613b      	str	r3, [r7, #16]
}
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bc2:	69b8      	ldr	r0, [r7, #24]
 8002bc4:	f000 f8f8 	bl	8002db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <pvPortMalloc+0x17c>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <pvPortMalloc+0x17c>)
 8002bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <pvPortMalloc+0x17c>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <pvPortMalloc+0x184>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d203      	bcs.n	8002bea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <pvPortMalloc+0x17c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <pvPortMalloc+0x184>)
 8002be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <pvPortMalloc+0x178>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bfe:	f001 f863 	bl	8003cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <pvPortMalloc+0x16a>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	60fb      	str	r3, [r7, #12]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <pvPortMalloc+0x168>
	return pvReturn;
 8002c22:	69fb      	ldr	r3, [r7, #28]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20012ccc 	.word	0x20012ccc
 8002c30:	20012cd8 	.word	0x20012cd8
 8002c34:	20012cd0 	.word	0x20012cd0
 8002c38:	20012cc4 	.word	0x20012cc4
 8002c3c:	20012cd4 	.word	0x20012cd4

08002c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d048      	beq.n	8002ce4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c52:	2308      	movs	r3, #8
 8002c54:	425b      	negs	r3, r3
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4413      	add	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <vPortFree+0xac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <vPortFree+0x44>
	__asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	60fb      	str	r3, [r7, #12]
}
 8002c80:	bf00      	nop
 8002c82:	e7fe      	b.n	8002c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <vPortFree+0x62>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	60bb      	str	r3, [r7, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <vPortFree+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d115      	bne.n	8002ce4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <vPortFree+0xac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002cc8:	f000 fff0 	bl	8003cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <vPortFree+0xb0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <vPortFree+0xb0>)
 8002cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cda:	6938      	ldr	r0, [r7, #16]
 8002cdc:	f000 f86c 	bl	8002db8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ce0:	f000 fff2 	bl	8003cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20012cd8 	.word	0x20012cd8
 8002cf0:	20012cd0 	.word	0x20012cd0

08002cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cfa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <prvHeapInit+0xac>)
 8002d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3307      	adds	r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <prvHeapInit+0xac>)
 8002d24:	4413      	add	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <prvHeapInit+0xb0>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <prvHeapInit+0xb0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d40:	2208      	movs	r2, #8
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <prvHeapInit+0xb4>)
 8002d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <prvHeapInit+0xb4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <prvHeapInit+0xb4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <prvHeapInit+0xb4>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <prvHeapInit+0xb8>)
 8002d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <prvHeapInit+0xbc>)
 8002d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <prvHeapInit+0xc0>)
 8002d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	200000c4 	.word	0x200000c4
 8002da4:	20012cc4 	.word	0x20012cc4
 8002da8:	20012ccc 	.word	0x20012ccc
 8002dac:	20012cd4 	.word	0x20012cd4
 8002db0:	20012cd0 	.word	0x20012cd0
 8002db4:	20012cd8 	.word	0x20012cd8

08002db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dc0:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <prvInsertBlockIntoFreeList+0xac>)
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e002      	b.n	8002dcc <prvInsertBlockIntoFreeList+0x14>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d8f7      	bhi.n	8002dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4413      	add	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d108      	bne.n	8002dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	441a      	add	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	441a      	add	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d118      	bne.n	8002e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <prvInsertBlockIntoFreeList+0xb0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d00d      	beq.n	8002e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e008      	b.n	8002e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <prvInsertBlockIntoFreeList+0xb0>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e003      	b.n	8002e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d002      	beq.n	8002e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20012cc4 	.word	0x20012cc4
 8002e68:	20012ccc 	.word	0x20012ccc

08002e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0208 	add.w	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0208 	add.w	r2, r3, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f24:	d103      	bne.n	8002f2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e00c      	b.n	8002f48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3308      	adds	r3, #8
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e002      	b.n	8002f3c <vListInsert+0x2e>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d2f6      	bcs.n	8002f36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6852      	ldr	r2, [r2, #4]
 8002fa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d103      	bne.n	8002fb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueGenericReset+0x2a>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60bb      	str	r3, [r7, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ffe:	f7ff fc39 	bl	8002874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	68f9      	ldr	r1, [r7, #12]
 800300c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	441a      	add	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	3b01      	subs	r3, #1
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	22ff      	movs	r2, #255	; 0xff
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01a      	beq.n	8003092 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3310      	adds	r3, #16
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f841 	bl	80040e8 <xTaskRemoveFromEventList>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <xQueueGenericReset+0xcc>)
 800306e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	e009      	b.n	8003092 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3310      	adds	r3, #16
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fef2 	bl	8002e6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3324      	adds	r3, #36	; 0x24
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff feed 	bl	8002e6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003092:	f7ff fc1f 	bl	80028d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003096:	2301      	movs	r3, #1
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	613b      	str	r3, [r7, #16]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	e004      	b.n	80030e4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	3350      	adds	r3, #80	; 0x50
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fce5 	bl	8002ab8 <pvPortMalloc>
 80030ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3350      	adds	r3, #80	; 0x50
 80030fe:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f805 	bl	800311c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003112:	69bb      	ldr	r3, [r7, #24]
	}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d103      	bne.n	8003138 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e002      	b.n	800313e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800314a:	2101      	movs	r1, #1
 800314c:	69b8      	ldr	r0, [r7, #24]
 800314e:	f7ff ff41 	bl	8002fd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueGenericSend+0x32>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <xQueueGenericSend+0x40>
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueGenericSend+0x44>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueGenericSend+0x46>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <xQueueGenericSend+0x60>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <xQueueGenericSend+0x6e>
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <xQueueGenericSend+0x72>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <xQueueGenericSend+0x74>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	623b      	str	r3, [r7, #32]
}
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f2:	f001 f915 	bl	8004420 <xTaskGetSchedulerState>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <xQueueGenericSend+0x9e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xQueueGenericSend+0xa2>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericSend+0xa4>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericSend+0xbe>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003222:	f7ff fb27 	bl	8002874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <xQueueGenericSend+0xd4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d129      	bne.n	800328c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800323e:	f000 fa07 	bl	8003650 <prvCopyDataToQueue>
 8003242:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	3324      	adds	r3, #36	; 0x24
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff49 	bl	80040e8 <xTaskRemoveFromEventList>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <xQueueGenericSend+0x1f8>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	e00a      	b.n	8003284 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <xQueueGenericSend+0x1f8>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003284:	f7ff fb26 	bl	80028d4 <vPortExitCritical>
				return pdPASS;
 8003288:	2301      	movs	r3, #1
 800328a:	e063      	b.n	8003354 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003292:	f7ff fb1f 	bl	80028d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003296:	2300      	movs	r3, #0
 8003298:	e05c      	b.n	8003354 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 ff81 	bl	80041ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032aa:	2301      	movs	r3, #1
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ae:	f7ff fb11 	bl	80028d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032b2:	f000 fcfb 	bl	8003cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032b6:	f7ff fadd 	bl	8002874 <vPortEnterCritical>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c6:	d103      	bne.n	80032d0 <xQueueGenericSend+0x16c>
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d103      	bne.n	80032e6 <xQueueGenericSend+0x182>
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e6:	f7ff faf5 	bl	80028d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ea:	1d3a      	adds	r2, r7, #4
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 ff70 	bl	80041d8 <xTaskCheckForTimeOut>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d124      	bne.n	8003348 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	f000 fa9e 	bl	8003840 <prvIsQueueFull>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	3310      	adds	r3, #16
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fe98 	bl	8004048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800331a:	f000 fa29 	bl	8003770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800331e:	f000 fcd3 	bl	8003cc8 <xTaskResumeAll>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f af7c 	bne.w	8003222 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <xQueueGenericSend+0x1f8>)
 800332c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	e772      	b.n	8003222 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800333c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800333e:	f000 fa17 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003342:	f000 fcc1 	bl	8003cc8 <xTaskResumeAll>
 8003346:	e76c      	b.n	8003222 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334a:	f000 fa11 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800334e:	f000 fcbb 	bl	8003cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003352:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003354:	4618      	mov	r0, r3
 8003356:	3738      	adds	r7, #56	; 0x38
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <xQueueGenericSendFromISR+0x3c>
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <xQueueGenericSendFromISR+0x40>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <xQueueGenericSendFromISR+0x42>
 80033a0:	2300      	movs	r3, #0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	623b      	str	r3, [r7, #32]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d103      	bne.n	80033ca <xQueueGenericSendFromISR+0x6a>
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <xQueueGenericSendFromISR+0x6e>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xQueueGenericSendFromISR+0x70>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ea:	f7ff fb25 	bl	8002a38 <vPortValidateInterruptPriority>
	__asm volatile
 80033ee:	f3ef 8211 	mrs	r2, BASEPRI
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	61ba      	str	r2, [r7, #24]
 8003404:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003406:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <xQueueGenericSendFromISR+0xbc>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d12c      	bne.n	8003476 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800342c:	f000 f910 	bl	8003650 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003430:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003438:	d112      	bne.n	8003460 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	3324      	adds	r3, #36	; 0x24
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fe4e 	bl	80040e8 <xTaskRemoveFromEventList>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00e      	beq.n	8003470 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e007      	b.n	8003470 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003464:	3301      	adds	r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	b25a      	sxtb	r2, r3
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003470:	2301      	movs	r3, #1
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003474:	e001      	b.n	800347a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f383 8811 	msr	BASEPRI, r3
}
 8003484:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003488:	4618      	mov	r0, r3
 800348a:	3738      	adds	r7, #56	; 0x38
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08c      	sub	sp, #48	; 0x30
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <xQueueReceive+0x30>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	623b      	str	r3, [r7, #32]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <xQueueReceive+0x3e>
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <xQueueReceive+0x42>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <xQueueReceive+0x44>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueReceive+0x5e>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	61fb      	str	r3, [r7, #28]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ee:	f000 ff97 	bl	8004420 <xTaskGetSchedulerState>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <xQueueReceive+0x6e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueReceive+0x72>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueReceive+0x74>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueReceive+0x8e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351e:	f7ff f9a9 	bl	8002874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01f      	beq.n	800356e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003532:	f000 f8f7 	bl	8003724 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00f      	beq.n	8003566 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	3310      	adds	r3, #16
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fdcc 	bl	80040e8 <xTaskRemoveFromEventList>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <xQueueReceive+0x1bc>)
 8003558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003566:	f7ff f9b5 	bl	80028d4 <vPortExitCritical>
				return pdPASS;
 800356a:	2301      	movs	r3, #1
 800356c:	e069      	b.n	8003642 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003574:	f7ff f9ae 	bl	80028d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003578:	2300      	movs	r3, #0
 800357a:	e062      	b.n	8003642 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003582:	f107 0310 	add.w	r3, r7, #16
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fe10 	bl	80041ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003590:	f7ff f9a0 	bl	80028d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003594:	f000 fb8a 	bl	8003cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003598:	f7ff f96c 	bl	8002874 <vPortEnterCritical>
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a2:	b25b      	sxtb	r3, r3
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035a8:	d103      	bne.n	80035b2 <xQueueReceive+0x122>
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035be:	d103      	bne.n	80035c8 <xQueueReceive+0x138>
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c8:	f7ff f984 	bl	80028d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035cc:	1d3a      	adds	r2, r7, #4
 80035ce:	f107 0310 	add.w	r3, r7, #16
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fdff 	bl	80041d8 <xTaskCheckForTimeOut>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d123      	bne.n	8003628 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e2:	f000 f917 	bl	8003814 <prvIsQueueEmpty>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd27 	bl	8004048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035fc:	f000 f8b8 	bl	8003770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003600:	f000 fb62 	bl	8003cc8 <xTaskResumeAll>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d189      	bne.n	800351e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <xQueueReceive+0x1bc>)
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	e780      	b.n	800351e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800361c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800361e:	f000 f8a7 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003622:	f000 fb51 	bl	8003cc8 <xTaskResumeAll>
 8003626:	e77a      	b.n	800351e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362a:	f000 f8a1 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362e:	f000 fb4b 	bl	8003cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003634:	f000 f8ee 	bl	8003814 <prvIsQueueEmpty>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f43f af6f 	beq.w	800351e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003642:	4618      	mov	r0, r3
 8003644:	3730      	adds	r7, #48	; 0x30
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14d      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 feee 	bl	800445c <xTaskPriorityDisinherit>
 8003680:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	e043      	b.n	8003712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6858      	ldr	r0, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	461a      	mov	r2, r3
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	f001 fdf8 	bl	8005290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d32b      	bcc.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e026      	b.n	8003712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68d8      	ldr	r0, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	f001 fdde 	bl	8005290 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	425b      	negs	r3, r3
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	425b      	negs	r3, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d105      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d303      	bcc.n	8003758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68d9      	ldr	r1, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f001 fd94 	bl	8005290 <memcpy>
	}
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003778:	f7ff f87c 	bl	8002874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003784:	e011      	b.n	80037aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	; 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fca8 	bl	80040e8 <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379e:	f000 fd7d 	bl	800429c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dce9      	bgt.n	8003786 <prvUnlockQueue+0x16>
 80037b2:	e000      	b.n	80037b6 <prvUnlockQueue+0x46>
					break;
 80037b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037be:	f7ff f889 	bl	80028d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c2:	f7ff f857 	bl	8002874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ce:	e011      	b.n	80037f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fc83 	bl	80040e8 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e8:	f000 fd58 	bl	800429c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dce9      	bgt.n	80037d0 <prvUnlockQueue+0x60>
 80037fc:	e000      	b.n	8003800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003808:	f7ff f864 	bl	80028d4 <vPortExitCritical>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800381c:	f7ff f82a 	bl	8002874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f7ff f84f 	bl	80028d4 <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f7ff f814 	bl	8002874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f7ff f837 	bl	80028d4 <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e014      	b.n	80038aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003880:	4a0f      	ldr	r2, [pc, #60]	; (80038c0 <vQueueAddToRegistry+0x50>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <vQueueAddToRegistry+0x50>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <vQueueAddToRegistry+0x50>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038a2:	e006      	b.n	80038b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d9e7      	bls.n	8003880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20012cdc 	.word	0x20012cdc

080038c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038d4:	f7fe ffce 	bl	8002874 <vPortEnterCritical>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038de:	b25b      	sxtb	r3, r3
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e4:	d103      	bne.n	80038ee <vQueueWaitForMessageRestricted+0x2a>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d103      	bne.n	8003904 <vQueueWaitForMessageRestricted+0x40>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003904:	f7fe ffe6 	bl	80028d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fbb9 	bl	8004090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff26 	bl	8003770 <prvUnlockQueue>
	}
 8003924:	bf00      	nop
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af04      	add	r7, sp, #16
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff f8b9 	bl	8002ab8 <pvPortMalloc>
 8003946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800394e:	2058      	movs	r0, #88	; 0x58
 8003950:	f7ff f8b2 	bl	8002ab8 <pvPortMalloc>
 8003954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
 8003962:	e005      	b.n	8003970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f7ff f96b 	bl	8002c40 <vPortFree>
 800396a:	e001      	b.n	8003970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	2300      	movs	r3, #0
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f80e 	bl	80039ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003992:	69f8      	ldr	r0, [r7, #28]
 8003994:	f000 f89a 	bl	8003acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003998:	2301      	movs	r3, #1
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e002      	b.n	80039a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039a4:	69bb      	ldr	r3, [r7, #24]
	}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b088      	sub	sp, #32
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	461a      	mov	r2, r3
 80039c6:	21a5      	movs	r1, #165	; 0xa5
 80039c8:	f001 fc70 	bl	80052ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039d6:	3b01      	subs	r3, #1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f023 0307 	bic.w	r3, r3, #7
 80039e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	617b      	str	r3, [r7, #20]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e012      	b.n	8003a38 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	7819      	ldrb	r1, [r3, #0]
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3334      	adds	r3, #52	; 0x34
 8003a22:	460a      	mov	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	d9e9      	bls.n	8003a12 <prvInitialiseNewTask+0x64>
 8003a3e:	e000      	b.n	8003a42 <prvInitialiseNewTask+0x94>
			{
				break;
 8003a40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a4a:	e003      	b.n	8003a54 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	2b0e      	cmp	r3, #14
 8003a58:	d901      	bls.n	8003a5e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a5a:	230e      	movs	r3, #14
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a68:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fa19 	bl	8002eac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fa14 	bl	8002eac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	f1c3 020f 	rsb	r2, r3, #15
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	69b8      	ldr	r0, [r7, #24]
 8003aae:	f7fe fda5 	bl	80025fc <pxPortInitialiseStack>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ac4:	bf00      	nop
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad4:	f7fe fece 	bl	8002874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <prvAddNewTaskToReadyList+0xc0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a2b      	ldr	r2, [pc, #172]	; (8003b8c <prvAddNewTaskToReadyList+0xc0>)
 8003ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003aea:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <prvAddNewTaskToReadyList+0xc0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d110      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003af8:	f000 fbf4 	bl	80042e4 <prvInitialiseTaskLists>
 8003afc:	e00d      	b.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003afe:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <prvAddNewTaskToReadyList+0xc8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d802      	bhi.n	8003b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <prvAddNewTaskToReadyList+0xcc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <prvAddNewTaskToReadyList+0xcc>)
 8003b22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <prvAddNewTaskToReadyList+0xcc>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <prvAddNewTaskToReadyList+0xd0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <prvAddNewTaskToReadyList+0xd0>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <prvAddNewTaskToReadyList+0xd4>)
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f7ff f9b6 	bl	8002ec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b5a:	f7fe febb 	bl	80028d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <prvAddNewTaskToReadyList+0xc8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <prvAddNewTaskToReadyList+0xc4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d207      	bcs.n	8003b84 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <prvAddNewTaskToReadyList+0xd8>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20012ebc 	.word	0x20012ebc
 8003b90:	20012d1c 	.word	0x20012d1c
 8003b94:	20012ec8 	.word	0x20012ec8
 8003b98:	20012ed8 	.word	0x20012ed8
 8003b9c:	20012ec4 	.word	0x20012ec4
 8003ba0:	20012d20 	.word	0x20012d20
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d017      	beq.n	8003bea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <vTaskDelay+0x60>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <vTaskDelay+0x30>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60bb      	str	r3, [r7, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bd8:	f000 f868 	bl	8003cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bdc:	2100      	movs	r1, #0
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fcc2 	bl	8004568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003be4:	f000 f870 	bl	8003cc8 <xTaskResumeAll>
 8003be8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d107      	bne.n	8003c00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <vTaskDelay+0x64>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20012ee4 	.word	0x20012ee4
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <vTaskStartScheduler+0x84>)
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2282      	movs	r2, #130	; 0x82
 8003c22:	491d      	ldr	r1, [pc, #116]	; (8003c98 <vTaskStartScheduler+0x88>)
 8003c24:	481d      	ldr	r0, [pc, #116]	; (8003c9c <vTaskStartScheduler+0x8c>)
 8003c26:	f7ff fe81 	bl	800392c <xTaskCreate>
 8003c2a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d102      	bne.n	8003c38 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003c32:	f000 fff7 	bl	8004c24 <xTimerCreateTimerTask>
 8003c36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d116      	bne.n	8003c6c <vTaskStartScheduler+0x5c>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	60bb      	str	r3, [r7, #8]
}
 8003c50:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c52:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <vTaskStartScheduler+0x90>)
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <vTaskStartScheduler+0x94>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <vTaskStartScheduler+0x98>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c66:	f7fe fd53 	bl	8002710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c6a:	e00e      	b.n	8003c8a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c72:	d10a      	bne.n	8003c8a <vTaskStartScheduler+0x7a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	607b      	str	r3, [r7, #4]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <vTaskStartScheduler+0x78>
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20012ee0 	.word	0x20012ee0
 8003c98:	08005338 	.word	0x08005338
 8003c9c:	080042b5 	.word	0x080042b5
 8003ca0:	20012edc 	.word	0x20012edc
 8003ca4:	20012ec8 	.word	0x20012ec8
 8003ca8:	20012ec0 	.word	0x20012ec0

08003cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <vTaskSuspendAll+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a03      	ldr	r2, [pc, #12]	; (8003cc4 <vTaskSuspendAll+0x18>)
 8003cb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20012ee4 	.word	0x20012ee4

08003cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <xTaskResumeAll+0x114>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	603b      	str	r3, [r7, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cf4:	f7fe fdbe 	bl	8002874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cf8:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <xTaskResumeAll+0x114>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	4a37      	ldr	r2, [pc, #220]	; (8003ddc <xTaskResumeAll+0x114>)
 8003d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <xTaskResumeAll+0x114>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d161      	bne.n	8003dce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d0a:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <xTaskResumeAll+0x118>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d05d      	beq.n	8003dce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d12:	e02e      	b.n	8003d72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d14:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <xTaskResumeAll+0x11c>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3318      	adds	r3, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff f92d 	bl	8002f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff f928 	bl	8002f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2201      	movs	r2, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <xTaskResumeAll+0x120>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <xTaskResumeAll+0x120>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <xTaskResumeAll+0x124>)
 8003d50:	441a      	add	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7ff f8b4 	bl	8002ec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <xTaskResumeAll+0x128>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <xTaskResumeAll+0x12c>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <xTaskResumeAll+0x11c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cc      	bne.n	8003d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d80:	f000 fb2e 	bl	80043e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <xTaskResumeAll+0x130>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d90:	f000 f846 	bl	8003e20 <xTaskIncrementTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <xTaskResumeAll+0x12c>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f1      	bne.n	8003d90 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <xTaskResumeAll+0x130>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <xTaskResumeAll+0x12c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <xTaskResumeAll+0x134>)
 8003dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dce:	f7fe fd81 	bl	80028d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20012ee4 	.word	0x20012ee4
 8003de0:	20012ebc 	.word	0x20012ebc
 8003de4:	20012e7c 	.word	0x20012e7c
 8003de8:	20012ec4 	.word	0x20012ec4
 8003dec:	20012d20 	.word	0x20012d20
 8003df0:	20012d1c 	.word	0x20012d1c
 8003df4:	20012ed0 	.word	0x20012ed0
 8003df8:	20012ecc 	.word	0x20012ecc
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <xTaskGetTickCount+0x1c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20012ec0 	.word	0x20012ec0

08003e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2a:	4b4e      	ldr	r3, [pc, #312]	; (8003f64 <xTaskIncrementTick+0x144>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 8088 	bne.w	8003f44 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <xTaskIncrementTick+0x148>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e3c:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <xTaskIncrementTick+0x148>)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d120      	bne.n	8003e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e48:	4b48      	ldr	r3, [pc, #288]	; (8003f6c <xTaskIncrementTick+0x14c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	603b      	str	r3, [r7, #0]
}
 8003e64:	bf00      	nop
 8003e66:	e7fe      	b.n	8003e66 <xTaskIncrementTick+0x46>
 8003e68:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <xTaskIncrementTick+0x14c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <xTaskIncrementTick+0x150>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3e      	ldr	r2, [pc, #248]	; (8003f6c <xTaskIncrementTick+0x14c>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4a3e      	ldr	r2, [pc, #248]	; (8003f70 <xTaskIncrementTick+0x150>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <xTaskIncrementTick+0x154>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <xTaskIncrementTick+0x154>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	f000 faab 	bl	80043e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <xTaskIncrementTick+0x158>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d348      	bcc.n	8003f26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <xTaskIncrementTick+0x14c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9e:	4b36      	ldr	r3, [pc, #216]	; (8003f78 <xTaskIncrementTick+0x158>)
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ea4:	601a      	str	r2, [r3, #0]
					break;
 8003ea6:	e03e      	b.n	8003f26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea8:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <xTaskIncrementTick+0x14c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d203      	bcs.n	8003ec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <xTaskIncrementTick+0x158>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ec6:	e02e      	b.n	8003f26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff f857 	bl	8002f80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	3318      	adds	r3, #24
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff f84e 	bl	8002f80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <xTaskIncrementTick+0x15c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <xTaskIncrementTick+0x15c>)
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <xTaskIncrementTick+0x160>)
 8003f04:	441a      	add	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fe ffda 	bl	8002ec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <xTaskIncrementTick+0x164>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3b9      	bcc.n	8003e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f24:	e7b6      	b.n	8003e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <xTaskIncrementTick+0x164>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4914      	ldr	r1, [pc, #80]	; (8003f80 <xTaskIncrementTick+0x160>)
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d907      	bls.n	8003f4e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e004      	b.n	8003f4e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <xTaskIncrementTick+0x168>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <xTaskIncrementTick+0x168>)
 8003f4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <xTaskIncrementTick+0x16c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f5a:	697b      	ldr	r3, [r7, #20]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20012ee4 	.word	0x20012ee4
 8003f68:	20012ec0 	.word	0x20012ec0
 8003f6c:	20012e74 	.word	0x20012e74
 8003f70:	20012e78 	.word	0x20012e78
 8003f74:	20012ed4 	.word	0x20012ed4
 8003f78:	20012edc 	.word	0x20012edc
 8003f7c:	20012ec4 	.word	0x20012ec4
 8003f80:	20012d20 	.word	0x20012d20
 8003f84:	20012d1c 	.word	0x20012d1c
 8003f88:	20012ecc 	.word	0x20012ecc
 8003f8c:	20012ed0 	.word	0x20012ed0

08003f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <vTaskSwitchContext+0xa4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <vTaskSwitchContext+0xa8>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fa4:	e03f      	b.n	8004026 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <vTaskSwitchContext+0xa8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <vTaskSwitchContext+0xac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	f1c3 031f 	rsb	r3, r3, #31
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	491f      	ldr	r1, [pc, #124]	; (8004040 <vTaskSwitchContext+0xb0>)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <vTaskSwitchContext+0x5c>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	607b      	str	r3, [r7, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <vTaskSwitchContext+0x5a>
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <vTaskSwitchContext+0xb0>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3308      	adds	r3, #8
 800400e:	429a      	cmp	r2, r3
 8004010:	d104      	bne.n	800401c <vTaskSwitchContext+0x8c>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4a08      	ldr	r2, [pc, #32]	; (8004044 <vTaskSwitchContext+0xb4>)
 8004024:	6013      	str	r3, [r2, #0]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20012ee4 	.word	0x20012ee4
 8004038:	20012ed0 	.word	0x20012ed0
 800403c:	20012ec4 	.word	0x20012ec4
 8004040:	20012d20 	.word	0x20012d20
 8004044:	20012d1c 	.word	0x20012d1c

08004048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <vTaskPlaceOnEventList+0x44>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3318      	adds	r3, #24
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fe ff49 	bl	8002f0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800407c:	2101      	movs	r1, #1
 800407e:	6838      	ldr	r0, [r7, #0]
 8004080:	f000 fa72 	bl	8004568 <prvAddCurrentTaskToDelayedList>
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20012d1c 	.word	0x20012d1c

08004090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	617b      	str	r3, [r7, #20]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3318      	adds	r3, #24
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7fe ff00 	bl	8002ec6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	68b8      	ldr	r0, [r7, #8]
 80040d6:	f000 fa47 	bl	8004568 <prvAddCurrentTaskToDelayedList>
	}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20012d1c 	.word	0x20012d1c

080040e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	60fb      	str	r3, [r7, #12]
}
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3318      	adds	r3, #24
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe ff31 	bl	8002f80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <xTaskRemoveFromEventList+0xac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11c      	bne.n	8004160 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe ff28 	bl	8002f80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <xTaskRemoveFromEventList+0xb0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <xTaskRemoveFromEventList+0xb0>)
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4a13      	ldr	r2, [pc, #76]	; (800419c <xTaskRemoveFromEventList+0xb4>)
 8004150:	441a      	add	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe feb4 	bl	8002ec6 <vListInsertEnd>
 800415e:	e005      	b.n	800416c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3318      	adds	r3, #24
 8004164:	4619      	mov	r1, r3
 8004166:	480e      	ldr	r0, [pc, #56]	; (80041a0 <xTaskRemoveFromEventList+0xb8>)
 8004168:	f7fe fead 	bl	8002ec6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <xTaskRemoveFromEventList+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	429a      	cmp	r2, r3
 8004178:	d905      	bls.n	8004186 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <xTaskRemoveFromEventList+0xc0>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e001      	b.n	800418a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800418a:	697b      	ldr	r3, [r7, #20]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20012ee4 	.word	0x20012ee4
 8004198:	20012ec4 	.word	0x20012ec4
 800419c:	20012d20 	.word	0x20012d20
 80041a0:	20012e7c 	.word	0x20012e7c
 80041a4:	20012d1c 	.word	0x20012d1c
 80041a8:	20012ed0 	.word	0x20012ed0

080041ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <vTaskInternalSetTimeOutState+0x24>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <vTaskInternalSetTimeOutState+0x28>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	605a      	str	r2, [r3, #4]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20012ed4 	.word	0x20012ed4
 80041d4:	20012ec0 	.word	0x20012ec0

080041d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	613b      	str	r3, [r7, #16]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800421a:	f7fe fb2b 	bl	8002874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <xTaskCheckForTimeOut+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004236:	d102      	bne.n	800423e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e023      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xTaskCheckForTimeOut+0xc0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d007      	beq.n	800425a <xTaskCheckForTimeOut+0x82>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e015      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d20b      	bcs.n	800427c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff9b 	bl	80041ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e004      	b.n	8004286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004282:	2301      	movs	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f7fe fb25 	bl	80028d4 <vPortExitCritical>

	return xReturn;
 800428a:	69fb      	ldr	r3, [r7, #28]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20012ec0 	.word	0x20012ec0
 8004298:	20012ed4 	.word	0x20012ed4

0800429c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <vTaskMissedYield+0x14>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20012ed0 	.word	0x20012ed0

080042b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042bc:	f000 f852 	bl	8004364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvIdleTask+0x28>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d9f9      	bls.n	80042bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <prvIdleTask+0x2c>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042d8:	e7f0      	b.n	80042bc <prvIdleTask+0x8>
 80042da:	bf00      	nop
 80042dc:	20012d20 	.word	0x20012d20
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e00c      	b.n	800430a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <prvInitialiseTaskLists+0x60>)
 80042fc:	4413      	add	r3, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fdb4 	bl	8002e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3301      	adds	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b0e      	cmp	r3, #14
 800430e:	d9ef      	bls.n	80042f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <prvInitialiseTaskLists+0x64>)
 8004312:	f7fe fdab 	bl	8002e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004316:	480d      	ldr	r0, [pc, #52]	; (800434c <prvInitialiseTaskLists+0x68>)
 8004318:	f7fe fda8 	bl	8002e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800431c:	480c      	ldr	r0, [pc, #48]	; (8004350 <prvInitialiseTaskLists+0x6c>)
 800431e:	f7fe fda5 	bl	8002e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004322:	480c      	ldr	r0, [pc, #48]	; (8004354 <prvInitialiseTaskLists+0x70>)
 8004324:	f7fe fda2 	bl	8002e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004328:	480b      	ldr	r0, [pc, #44]	; (8004358 <prvInitialiseTaskLists+0x74>)
 800432a:	f7fe fd9f 	bl	8002e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800432e:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvInitialiseTaskLists+0x78>)
 8004330:	4a05      	ldr	r2, [pc, #20]	; (8004348 <prvInitialiseTaskLists+0x64>)
 8004332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <prvInitialiseTaskLists+0x7c>)
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <prvInitialiseTaskLists+0x68>)
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20012d20 	.word	0x20012d20
 8004348:	20012e4c 	.word	0x20012e4c
 800434c:	20012e60 	.word	0x20012e60
 8004350:	20012e7c 	.word	0x20012e7c
 8004354:	20012e90 	.word	0x20012e90
 8004358:	20012ea8 	.word	0x20012ea8
 800435c:	20012e74 	.word	0x20012e74
 8004360:	20012e78 	.word	0x20012e78

08004364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800436a:	e019      	b.n	80043a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800436c:	f7fe fa82 	bl	8002874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004370:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <prvCheckTasksWaitingTermination+0x50>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe fdff 	bl	8002f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <prvCheckTasksWaitingTermination+0x54>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3b01      	subs	r3, #1
 8004388:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <prvCheckTasksWaitingTermination+0x54>)
 800438a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 8004394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004396:	f7fe fa9d 	bl	80028d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f810 	bl	80043c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <prvCheckTasksWaitingTermination+0x58>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e1      	bne.n	800436c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20012e90 	.word	0x20012e90
 80043b8:	20012ebc 	.word	0x20012ebc
 80043bc:	20012ea4 	.word	0x20012ea4

080043c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fc37 	bl	8002c40 <vPortFree>
			vPortFree( pxTCB );
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fe fc34 	bl	8002c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <prvResetNextTaskUnblockTime+0x38>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvResetNextTaskUnblockTime+0x3c>)
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043f8:	e008      	b.n	800440c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <prvResetNextTaskUnblockTime+0x38>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a04      	ldr	r2, [pc, #16]	; (800441c <prvResetNextTaskUnblockTime+0x3c>)
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20012e74 	.word	0x20012e74
 800441c:	20012edc 	.word	0x20012edc

08004420 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <xTaskGetSchedulerState+0x34>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800442e:	2301      	movs	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e008      	b.n	8004446 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <xTaskGetSchedulerState+0x38>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800443c:	2302      	movs	r3, #2
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e001      	b.n	8004446 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004446:	687b      	ldr	r3, [r7, #4]
	}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	20012ec8 	.word	0x20012ec8
 8004458:	20012ee4 	.word	0x20012ee4

0800445c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d06e      	beq.n	8004550 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004472:	4b3a      	ldr	r3, [pc, #232]	; (800455c <xTaskPriorityDisinherit+0x100>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	429a      	cmp	r2, r3
 800447a:	d00a      	beq.n	8004492 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60bb      	str	r3, [r7, #8]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b4:	1e5a      	subs	r2, r3, #1
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d044      	beq.n	8004550 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d140      	bne.n	8004550 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fd54 	bl	8002f80 <uxListRemove>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	491f      	ldr	r1, [pc, #124]	; (8004560 <xTaskPriorityDisinherit+0x104>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xTaskPriorityDisinherit+0xae>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	2201      	movs	r2, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43da      	mvns	r2, r3
 8004500:	4b18      	ldr	r3, [pc, #96]	; (8004564 <xTaskPriorityDisinherit+0x108>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4013      	ands	r3, r2
 8004506:	4a17      	ldr	r2, [pc, #92]	; (8004564 <xTaskPriorityDisinherit+0x108>)
 8004508:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f1c3 020f 	rsb	r2, r3, #15
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <xTaskPriorityDisinherit+0x108>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <xTaskPriorityDisinherit+0x108>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a08      	ldr	r2, [pc, #32]	; (8004560 <xTaskPriorityDisinherit+0x104>)
 800453e:	441a      	add	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fcbd 	bl	8002ec6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004550:	697b      	ldr	r3, [r7, #20]
	}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20012d1c 	.word	0x20012d1c
 8004560:	20012d20 	.word	0x20012d20
 8004564:	20012ec4 	.word	0x20012ec4

08004568 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fcfe 	bl	8002f80 <uxListRemove>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800458a:	4b24      	ldr	r3, [pc, #144]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2201      	movs	r2, #1
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43da      	mvns	r2, r3
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4013      	ands	r3, r2
 800459e:	4a20      	ldr	r2, [pc, #128]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a8:	d10a      	bne.n	80045c0 <prvAddCurrentTaskToDelayedList+0x58>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	481a      	ldr	r0, [pc, #104]	; (8004624 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045ba:	f7fe fc84 	bl	8002ec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045be:	e026      	b.n	800460e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4413      	add	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d209      	bcs.n	80045ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b0f      	ldr	r3, [pc, #60]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f7fe fc92 	bl	8002f0e <vListInsert>
}
 80045ea:	e010      	b.n	800460e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe fc88 	bl	8002f0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d202      	bcs.n	800460e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004608:	4a09      	ldr	r2, [pc, #36]	; (8004630 <prvAddCurrentTaskToDelayedList+0xc8>)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20012ec0 	.word	0x20012ec0
 800461c:	20012d1c 	.word	0x20012d1c
 8004620:	20012ec4 	.word	0x20012ec4
 8004624:	20012ea8 	.word	0x20012ea8
 8004628:	20012e78 	.word	0x20012e78
 800462c:	20012e74 	.word	0x20012e74
 8004630:	20012edc 	.word	0x20012edc

08004634 <Uint32ConvertHex>:
		}
	#endif

#endif

void Uint32ConvertHex(volatile StackType_t pStack, char *charTxScanTaskStack){
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
    uint32_t remainder, quotient;
    int j = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
    int reversal = 2, end = 0;
 8004642:	2302      	movs	r3, #2
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
    char reversalChar;

    quotient = pStack;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	61fb      	str	r3, [r7, #28]
    charTxScanTaskStack[j++] = '0'; // ascii  number 0
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	61ba      	str	r2, [r7, #24]
 8004654:	461a      	mov	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4413      	add	r3, r2
 800465a:	2230      	movs	r2, #48	; 0x30
 800465c:	701a      	strb	r2, [r3, #0]
    charTxScanTaskStack[j++] = 'X'; // ascii alphabet X
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	61ba      	str	r2, [r7, #24]
 8004664:	461a      	mov	r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	4413      	add	r3, r2
 800466a:	2258      	movs	r2, #88	; 0x58
 800466c:	701a      	strb	r2, [r3, #0]
    while (quotient != 0) {
 800466e:	e020      	b.n	80046b2 <Uint32ConvertHex+0x7e>
        remainder = quotient % 16;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	60bb      	str	r3, [r7, #8]
        if (remainder < 10)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b09      	cmp	r3, #9
 800467c:	d80b      	bhi.n	8004696 <Uint32ConvertHex+0x62>
		    charTxScanTaskStack[j++] = '0' + remainder;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	61b9      	str	r1, [r7, #24]
 8004688:	4619      	mov	r1, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	440b      	add	r3, r1
 800468e:	3230      	adds	r2, #48	; 0x30
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e00a      	b.n	80046ac <Uint32ConvertHex+0x78>
        else
            charTxScanTaskStack[j++] = 'A' + remainder; // A = 65;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	1c59      	adds	r1, r3, #1
 800469e:	61b9      	str	r1, [r7, #24]
 80046a0:	4619      	mov	r1, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	440b      	add	r3, r1
 80046a6:	3241      	adds	r2, #65	; 0x41
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
        quotient = quotient / 16;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	61fb      	str	r3, [r7, #28]
    while (quotient != 0) {
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1db      	bne.n	8004670 <Uint32ConvertHex+0x3c>
    }
    end = j - 1;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	613b      	str	r3, [r7, #16]
    for (reversal; reversal < end / 2 + 1; reversal++, end--) {
 80046be:	e017      	b.n	80046f0 <Uint32ConvertHex+0xbc>
        reversalChar = charTxScanTaskStack[reversal];
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	73fb      	strb	r3, [r7, #15]
        charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	441a      	add	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	440b      	add	r3, r1
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[end] = reversalChar;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	701a      	strb	r2, [r3, #0]
    for (reversal; reversal < end / 2 + 1; reversal++, end--) {
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3301      	adds	r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	0fda      	lsrs	r2, r3, #31
 80046f4:	4413      	add	r3, r2
 80046f6:	105b      	asrs	r3, r3, #1
 80046f8:	461a      	mov	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4293      	cmp	r3, r2
 80046fe:	dddf      	ble.n	80046c0 <Uint32ConvertHex+0x8c>
    }
    charTxScanTaskStack[j] = '\0';
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4413      	add	r3, r2
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
}
 800470a:	bf00      	nop
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <LongConvertCharArray>:

void LongConvertCharArray(UBaseType_t TxScanTaskPriority, char *charTxScanTaskStack) {
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    uint32_t remainder, quotient;
    int reversal = 0, end = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
    int j = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
    char reversalChar;

    quotient = TxScanTaskPriority;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	61fb      	str	r3, [r7, #28]
    if (quotient == 0)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d127      	bne.n	8004788 <LongConvertCharArray+0x70>
        charTxScanTaskStack[j++] = '0' + quotient;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	6139      	str	r1, [r7, #16]
 8004742:	4619      	mov	r1, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	440b      	add	r3, r1
 8004748:	3230      	adds	r2, #48	; 0x30
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
    while (quotient != 0) {
 800474e:	e01b      	b.n	8004788 <LongConvertCharArray+0x70>
        remainder = quotient % 10;
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <LongConvertCharArray+0xd4>)
 8004754:	fba3 1302 	umull	r1, r3, r3, r2
 8004758:	08d9      	lsrs	r1, r3, #3
 800475a:	460b      	mov	r3, r1
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	60bb      	str	r3, [r7, #8]
        charTxScanTaskStack[j++] = '0' + remainder;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1c59      	adds	r1, r3, #1
 800476e:	6139      	str	r1, [r7, #16]
 8004770:	4619      	mov	r1, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	440b      	add	r3, r1
 8004776:	3230      	adds	r2, #48	; 0x30
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
        quotient = quotient / 10;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <LongConvertCharArray+0xd4>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	61fb      	str	r3, [r7, #28]
    while (quotient != 0) {
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e0      	bne.n	8004750 <LongConvertCharArray+0x38>
    }
    end = j - 1;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	3b01      	subs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
    for (reversal; reversal < end / 2 + 1; reversal++, end--) {
 8004794:	e017      	b.n	80047c6 <LongConvertCharArray+0xae>
        reversalChar = charTxScanTaskStack[reversal];
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4413      	add	r3, r2
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	73fb      	strb	r3, [r7, #15]
        charTxScanTaskStack[reversal] = charTxScanTaskStack[end];
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	441a      	add	r2, r3
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	440b      	add	r3, r1
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	701a      	strb	r2, [r3, #0]
        charTxScanTaskStack[end] = reversalChar;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	701a      	strb	r2, [r3, #0]
    for (reversal; reversal < end / 2 + 1; reversal++, end--) {
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3301      	adds	r3, #1
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	0fda      	lsrs	r2, r3, #31
 80047ca:	4413      	add	r3, r2
 80047cc:	105b      	asrs	r3, r3, #1
 80047ce:	461a      	mov	r2, r3
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	dddf      	ble.n	8004796 <LongConvertCharArray+0x7e>
    }
    charTxScanTaskStack[j] = '\0';
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	3724      	adds	r7, #36	; 0x24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	cccccccd 	.word	0xcccccccd

080047f0 <Taskmonitor>:

void Taskmonitor() {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b09c      	sub	sp, #112	; 0x70
 80047f4:	af00      	add	r7, sp, #0
	char *TITLE = "Name\t|Priority(Base/actual)\t|pxStack\t|pxTopOfStack\t|State\n";
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <Taskmonitor+0x244>)
 80047f8:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart2, (uint8_t *)TITLE, sizeof(TITLE), 0xffff);
 80047fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047fe:	2204      	movs	r2, #4
 8004800:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004802:	488d      	ldr	r0, [pc, #564]	; (8004a38 <Taskmonitor+0x248>)
 8004804:	f7fd fb85 	bl	8001f12 <HAL_UART_Transmit>
	char curr_buf[64], item_buf[16];
	volatile int currNumofItem;
	volatile UBaseType_t currTaskPriority;
	volatile StackType_t *currTaskStack = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	663b      	str	r3, [r7, #96]	; 0x60
	ListItem_t *pxItem = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	66fb      	str	r3, [r7, #108]	; 0x6c
	TCB_t *pxTCB = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	65fb      	str	r3, [r7, #92]	; 0x5c
    /*
     * READY State
     */
	for (UBaseType_t priority = 0; priority < 15; ++priority) {
 8004814:	2300      	movs	r3, #0
 8004816:	66bb      	str	r3, [r7, #104]	; 0x68
 8004818:	e0fe      	b.n	8004a18 <Taskmonitor+0x228>
		if (listLIST_IS_EMPTY(&pxReadyTasksLists[priority]))
 800481a:	4988      	ldr	r1, [pc, #544]	; (8004a3c <Taskmonitor+0x24c>)
 800481c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80f0 	beq.w	8004a10 <Taskmonitor+0x220>
			continue;

		currNumofItem = listCURRENT_LIST_LENGTH(&pxReadyTasksLists[priority]);
 8004830:	4982      	ldr	r1, [pc, #520]	; (8004a3c <Taskmonitor+0x24c>)
 8004832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60bb      	str	r3, [r7, #8]
		pxItem = listGET_ITEM_OF_HEAD_ENTRY(&pxReadyTasksLists[priority]);
 8004842:	497e      	ldr	r1, [pc, #504]	; (8004a3c <Taskmonitor+0x24c>)
 8004844:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	330c      	adds	r3, #12
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (; currNumofItem > 0; --currNumofItem, pxItem = pxItem->pxNext) {
 8004856:	e0d6      	b.n	8004a06 <Taskmonitor+0x216>
			pxTCB = pxItem->pvOwner;
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	65fb      	str	r3, [r7, #92]	; 0x5c
			memset(curr_buf, '\0', sizeof(curr_buf));
 800485e:	f107 031c 	add.w	r3, r7, #28
 8004862:	2240      	movs	r2, #64	; 0x40
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fd20 	bl	80052ac <memset>
			memset(item_buf, '\0', sizeof(item_buf));
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	2210      	movs	r2, #16
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fd19 	bl	80052ac <memset>
			// Name
			strcpy(curr_buf, pxTCB->pcTaskName);
 800487a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004880:	f107 031c 	add.w	r3, r7, #28
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd18 	bl	80052bc <strcpy>
			// Priority Base /  Actual
			currTaskPriority = pxTCB->uxBasePriority;
 800488c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800488e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004890:	607b      	str	r3, [r7, #4]
            LongConvertCharArray(currTaskPriority, item_buf);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f107 020c 	add.w	r2, r7, #12
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ff3c 	bl	8004718 <LongConvertCharArray>
			strncat(curr_buf, item_buf, strlen(item_buf));
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fb fc93 	bl	80001d0 <strlen>
 80048aa:	4602      	mov	r2, r0
 80048ac:	f107 010c 	add.w	r1, r7, #12
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fd09 	bl	80052cc <strncat>
            strcat(curr_buf, "/");
 80048ba:	f107 031c 	add.w	r3, r7, #28
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fc86 	bl	80001d0 <strlen>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	4413      	add	r3, r2
 80048ce:	495c      	ldr	r1, [pc, #368]	; (8004a40 <Taskmonitor+0x250>)
 80048d0:	461a      	mov	r2, r3
 80048d2:	460b      	mov	r3, r1
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	8013      	strh	r3, [r2, #0]

			currTaskPriority = pxTCB->uxPriority;
 80048d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	607b      	str	r3, [r7, #4]
			LongConvertCharArray(currTaskPriority, item_buf);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f107 020c 	add.w	r2, r7, #12
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff16 	bl	8004718 <LongConvertCharArray>
			strncat(curr_buf, item_buf, strlen(item_buf));
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fb fc6d 	bl	80001d0 <strlen>
 80048f6:	4602      	mov	r2, r0
 80048f8:	f107 010c 	add.w	r1, r7, #12
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fce3 	bl	80052cc <strncat>
			strcat(curr_buf, "\t");
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fc60 	bl	80001d0 <strlen>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	f107 031c 	add.w	r3, r7, #28
 8004918:	4413      	add	r3, r2
 800491a:	494a      	ldr	r1, [pc, #296]	; (8004a44 <Taskmonitor+0x254>)
 800491c:	461a      	mov	r2, r3
 800491e:	460b      	mov	r3, r1
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	8013      	strh	r3, [r2, #0]

			// pxStack
			currTaskStack = pxTCB->pxStack;
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
			Uint32ConvertHex(currTaskStack, item_buf);
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	f107 020c 	add.w	r2, r7, #12
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fe7e 	bl	8004634 <Uint32ConvertHex>
			strncat(curr_buf, item_buf, strlen(item_buf));
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	4618      	mov	r0, r3
 800493e:	f7fb fc47 	bl	80001d0 <strlen>
 8004942:	4602      	mov	r2, r0
 8004944:	f107 010c 	add.w	r1, r7, #12
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fcbd 	bl	80052cc <strncat>
			strcat(curr_buf, "\t");
 8004952:	f107 031c 	add.w	r3, r7, #28
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fc3a 	bl	80001d0 <strlen>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	f107 031c 	add.w	r3, r7, #28
 8004964:	4413      	add	r3, r2
 8004966:	4937      	ldr	r1, [pc, #220]	; (8004a44 <Taskmonitor+0x254>)
 8004968:	461a      	mov	r2, r3
 800496a:	460b      	mov	r3, r1
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	8013      	strh	r3, [r2, #0]

			// pxTopOfStack
			currTaskStack = pxTCB->pxTopOfStack;
 8004970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
			Uint32ConvertHex(currTaskStack, item_buf);
 8004976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004978:	f107 020c 	add.w	r2, r7, #12
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fe58 	bl	8004634 <Uint32ConvertHex>
			strncat(curr_buf, item_buf, strlen(item_buf));
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f7fb fc21 	bl	80001d0 <strlen>
 800498e:	4602      	mov	r2, r0
 8004990:	f107 010c 	add.w	r1, r7, #12
 8004994:	f107 031c 	add.w	r3, r7, #28
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fc97 	bl	80052cc <strncat>
			strcat(curr_buf, "\t");
 800499e:	f107 031c 	add.w	r3, r7, #28
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fc14 	bl	80001d0 <strlen>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	f107 031c 	add.w	r3, r7, #28
 80049b0:	4413      	add	r3, r2
 80049b2:	4924      	ldr	r1, [pc, #144]	; (8004a44 <Taskmonitor+0x254>)
 80049b4:	461a      	mov	r2, r3
 80049b6:	460b      	mov	r3, r1
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	8013      	strh	r3, [r2, #0]
            // State
			strcat(curr_buf, "READY\n");
 80049bc:	f107 031c 	add.w	r3, r7, #28
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fc05 	bl	80001d0 <strlen>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	f107 031c 	add.w	r3, r7, #28
 80049ce:	4413      	add	r3, r2
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <Taskmonitor+0x258>)
 80049d2:	6810      	ldr	r0, [r2, #0]
 80049d4:	6018      	str	r0, [r3, #0]
 80049d6:	8891      	ldrh	r1, [r2, #4]
 80049d8:	7992      	ldrb	r2, [r2, #6]
 80049da:	8099      	strh	r1, [r3, #4]
 80049dc:	719a      	strb	r2, [r3, #6]
			// Write to console from USART
			HAL_UART_Transmit(&huart2, (uint8_t *)curr_buf, strlen(curr_buf), 0xffff);
 80049de:	f107 031c 	add.w	r3, r7, #28
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fb fbf4 	bl	80001d0 <strlen>
 80049e8:	4603      	mov	r3, r0
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	f107 011c 	add.w	r1, r7, #28
 80049f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f4:	4810      	ldr	r0, [pc, #64]	; (8004a38 <Taskmonitor+0x248>)
 80049f6:	f7fd fa8c 	bl	8001f12 <HAL_UART_Transmit>
		for (; currNumofItem > 0; --currNumofItem, pxItem = pxItem->pxNext) {
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f73f af25 	bgt.w	8004858 <Taskmonitor+0x68>
 8004a0e:	e000      	b.n	8004a12 <Taskmonitor+0x222>
			continue;
 8004a10:	bf00      	nop
	for (UBaseType_t priority = 0; priority < 15; ++priority) {
 8004a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a14:	3301      	adds	r3, #1
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a1a:	2b0e      	cmp	r3, #14
 8004a1c:	f67f aefd 	bls.w	800481a <Taskmonitor+0x2a>
	}

	/*
	 * Delayed State
	 */
	currNumofItem = pxDelayedTaskList->uxNumberOfItems;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	; (8004a4c <Taskmonitor+0x25c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60bb      	str	r3, [r7, #8]
	pxItem = listGET_ITEM_OF_HEAD_ENTRY(pxDelayedTaskList);
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <Taskmonitor+0x25c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (; currNumofItem > 0; --currNumofItem, pxItem = pxItem->pxNext) {
 8004a30:	e0e6      	b.n	8004c00 <Taskmonitor+0x410>
 8004a32:	bf00      	nop
 8004a34:	08005340 	.word	0x08005340
 8004a38:	2000002c 	.word	0x2000002c
 8004a3c:	20012d20 	.word	0x20012d20
 8004a40:	0800537c 	.word	0x0800537c
 8004a44:	08005380 	.word	0x08005380
 8004a48:	08005384 	.word	0x08005384
 8004a4c:	20012e74 	.word	0x20012e74
		pxTCB = pxItem->pvOwner;
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	65fb      	str	r3, [r7, #92]	; 0x5c
		memset(curr_buf, '\0', sizeof(curr_buf));
 8004a56:	f107 031c 	add.w	r3, r7, #28
 8004a5a:	2240      	movs	r2, #64	; 0x40
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fc24 	bl	80052ac <memset>
		memset(item_buf, '\0', sizeof(item_buf));
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	2210      	movs	r2, #16
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fc1d 	bl	80052ac <memset>
		// Name
		strcpy(curr_buf, pxTCB->pcTaskName);
 8004a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004a78:	f107 031c 	add.w	r3, r7, #28
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fc1c 	bl	80052bc <strcpy>
		// Priority Base /  Actual
		currTaskPriority = pxTCB->uxBasePriority;
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	607b      	str	r3, [r7, #4]
        LongConvertCharArray(currTaskPriority, item_buf);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f107 020c 	add.w	r2, r7, #12
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe40 	bl	8004718 <LongConvertCharArray>
		strncat(curr_buf, item_buf, strlen(item_buf));
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fb97 	bl	80001d0 <strlen>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f107 010c 	add.w	r1, r7, #12
 8004aa8:	f107 031c 	add.w	r3, r7, #28
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fc0d 	bl	80052cc <strncat>
        strcat(curr_buf, "/");
 8004ab2:	f107 031c 	add.w	r3, r7, #28
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fb fb8a 	bl	80001d0 <strlen>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f107 031c 	add.w	r3, r7, #28
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4953      	ldr	r1, [pc, #332]	; (8004c14 <Taskmonitor+0x424>)
 8004ac8:	461a      	mov	r2, r3
 8004aca:	460b      	mov	r3, r1
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	8013      	strh	r3, [r2, #0]

		currTaskPriority = pxTCB->uxPriority;
 8004ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	607b      	str	r3, [r7, #4]
		LongConvertCharArray(currTaskPriority, item_buf);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f107 020c 	add.w	r2, r7, #12
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fe1a 	bl	8004718 <LongConvertCharArray>
		strncat(curr_buf, item_buf, strlen(item_buf));
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fb fb71 	bl	80001d0 <strlen>
 8004aee:	4602      	mov	r2, r0
 8004af0:	f107 010c 	add.w	r1, r7, #12
 8004af4:	f107 031c 	add.w	r3, r7, #28
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fbe7 	bl	80052cc <strncat>
		strcat(curr_buf, "\t");
 8004afe:	f107 031c 	add.w	r3, r7, #28
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fb64 	bl	80001d0 <strlen>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f107 031c 	add.w	r3, r7, #28
 8004b10:	4413      	add	r3, r2
 8004b12:	4941      	ldr	r1, [pc, #260]	; (8004c18 <Taskmonitor+0x428>)
 8004b14:	461a      	mov	r2, r3
 8004b16:	460b      	mov	r3, r1
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	8013      	strh	r3, [r2, #0]

		// pxStack
		currTaskStack = pxTCB->pxStack;
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	663b      	str	r3, [r7, #96]	; 0x60
		Uint32ConvertHex(currTaskStack, item_buf);
 8004b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b24:	f107 020c 	add.w	r2, r7, #12
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fd82 	bl	8004634 <Uint32ConvertHex>
		strncat(curr_buf, item_buf, strlen(item_buf));
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fb fb4b 	bl	80001d0 <strlen>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	f107 010c 	add.w	r1, r7, #12
 8004b40:	f107 031c 	add.w	r3, r7, #28
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fbc1 	bl	80052cc <strncat>
		strcat(curr_buf, "\t");
 8004b4a:	f107 031c 	add.w	r3, r7, #28
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fb fb3e 	bl	80001d0 <strlen>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461a      	mov	r2, r3
 8004b58:	f107 031c 	add.w	r3, r7, #28
 8004b5c:	4413      	add	r3, r2
 8004b5e:	492e      	ldr	r1, [pc, #184]	; (8004c18 <Taskmonitor+0x428>)
 8004b60:	461a      	mov	r2, r3
 8004b62:	460b      	mov	r3, r1
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	8013      	strh	r3, [r2, #0]

		// pxTopOfStack
		currTaskStack = pxTCB->pxTopOfStack;
 8004b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	663b      	str	r3, [r7, #96]	; 0x60
		Uint32ConvertHex(currTaskStack, item_buf);
 8004b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b70:	f107 020c 	add.w	r2, r7, #12
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fd5c 	bl	8004634 <Uint32ConvertHex>
		strncat(curr_buf, item_buf, strlen(item_buf));
 8004b7c:	f107 030c 	add.w	r3, r7, #12
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fb fb25 	bl	80001d0 <strlen>
 8004b86:	4602      	mov	r2, r0
 8004b88:	f107 010c 	add.w	r1, r7, #12
 8004b8c:	f107 031c 	add.w	r3, r7, #28
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fb9b 	bl	80052cc <strncat>
		strcat(curr_buf, "\t");
 8004b96:	f107 031c 	add.w	r3, r7, #28
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fb18 	bl	80001d0 <strlen>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f107 031c 	add.w	r3, r7, #28
 8004ba8:	4413      	add	r3, r2
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <Taskmonitor+0x428>)
 8004bac:	461a      	mov	r2, r3
 8004bae:	460b      	mov	r3, r1
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	8013      	strh	r3, [r2, #0]
        // State
		strcat(curr_buf, "DELAYED\n");
 8004bb4:	f107 031c 	add.w	r3, r7, #28
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fb09 	bl	80001d0 <strlen>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f107 031c 	add.w	r3, r7, #28
 8004bc6:	4413      	add	r3, r2
 8004bc8:	4914      	ldr	r1, [pc, #80]	; (8004c1c <Taskmonitor+0x42c>)
 8004bca:	461a      	mov	r2, r3
 8004bcc:	460b      	mov	r3, r1
 8004bce:	cb03      	ldmia	r3!, {r0, r1}
 8004bd0:	6010      	str	r0, [r2, #0]
 8004bd2:	6051      	str	r1, [r2, #4]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	7213      	strb	r3, [r2, #8]
		// Write to console from USART
		HAL_UART_Transmit(&huart2, (uint8_t *)curr_buf, strlen(curr_buf), 0xffff);
 8004bd8:	f107 031c 	add.w	r3, r7, #28
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fb faf7 	bl	80001d0 <strlen>
 8004be2:	4603      	mov	r3, r0
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f107 011c 	add.w	r1, r7, #28
 8004bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bee:	480c      	ldr	r0, [pc, #48]	; (8004c20 <Taskmonitor+0x430>)
 8004bf0:	f7fd f98f 	bl	8001f12 <HAL_UART_Transmit>
	for (; currNumofItem > 0; --currNumofItem, pxItem = pxItem->pxNext) {
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f73f af24 	bgt.w	8004a50 <Taskmonitor+0x260>
	}
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3770      	adds	r7, #112	; 0x70
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0800537c 	.word	0x0800537c
 8004c18:	08005380 	.word	0x08005380
 8004c1c:	0800538c 	.word	0x0800538c
 8004c20:	2000002c 	.word	0x2000002c

08004c24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c2e:	f000 fad5 	bl	80051dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <xTimerCreateTimerTask+0x54>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <xTimerCreateTimerTask+0x58>)
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	2302      	movs	r3, #2
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c48:	490d      	ldr	r1, [pc, #52]	; (8004c80 <xTimerCreateTimerTask+0x5c>)
 8004c4a:	480e      	ldr	r0, [pc, #56]	; (8004c84 <xTimerCreateTimerTask+0x60>)
 8004c4c:	f7fe fe6e 	bl	800392c <xTaskCreate>
 8004c50:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	603b      	str	r3, [r7, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004c6e:	687b      	ldr	r3, [r7, #4]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20012f18 	.word	0x20012f18
 8004c7c:	20012f1c 	.word	0x20012f1c
 8004c80:	08005398 	.word	0x08005398
 8004c84:	08004dbd 	.word	0x08004dbd

08004c88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	623b      	str	r3, [r7, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <xTimerGenericCommand+0x98>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02a      	beq.n	8004d14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	dc18      	bgt.n	8004d02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cd0:	f7ff fba6 	bl	8004420 <xTaskGetSchedulerState>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d109      	bne.n	8004cee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <xTimerGenericCommand+0x98>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f107 0114 	add.w	r1, r7, #20
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce6:	f7fe fa3d 	bl	8003164 <xQueueGenericSend>
 8004cea:	6278      	str	r0, [r7, #36]	; 0x24
 8004cec:	e012      	b.n	8004d14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <xTimerGenericCommand+0x98>)
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	f107 0114 	add.w	r1, r7, #20
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f7fe fa33 	bl	8003164 <xQueueGenericSend>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24
 8004d00:	e008      	b.n	8004d14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <xTimerGenericCommand+0x98>)
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	f107 0114 	add.w	r1, r7, #20
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	f7fe fb27 	bl	8003360 <xQueueGenericSendFromISR>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20012f18 	.word	0x20012f18

08004d24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <prvProcessExpiredTimer+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe f91f 	bl	8002f80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	18d1      	adds	r1, r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	6978      	ldr	r0, [r7, #20]
 8004d5e:	f000 f8d1 	bl	8004f04 <prvInsertTimerInActiveList>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01f      	beq.n	8004da8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	2100      	movs	r1, #0
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff88 	bl	8004c88 <xTimerGenericCommand>
 8004d78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d113      	bne.n	8004da8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	6978      	ldr	r0, [r7, #20]
 8004dae:	4798      	blx	r3
}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20012f10 	.word	0x20012f10

08004dbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 f857 	bl	8004e7c <prvGetNextExpireTime>
 8004dce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f803 	bl	8004de0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dda:	f000 f8d5 	bl	8004f88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dde:	e7f1      	b.n	8004dc4 <prvTimerTask+0x8>

08004de0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dea:	f7fe ff5f 	bl	8003cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f866 	bl	8004ec4 <prvSampleTimeNow>
 8004df8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d130      	bne.n	8004e62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <prvProcessTimerOrBlockTask+0x3c>
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d806      	bhi.n	8004e1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e0e:	f7fe ff5b 	bl	8003cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff85 	bl	8004d24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e1a:	e024      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e22:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <prvProcessTimerOrBlockTask+0x90>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <prvProcessTimerOrBlockTask+0x50>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <prvProcessTimerOrBlockTask+0x52>
 8004e30:	2300      	movs	r3, #0
 8004e32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <prvProcessTimerOrBlockTask+0x94>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fe fd3f 	bl	80038c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e46:	f7fe ff3f 	bl	8003cc8 <xTaskResumeAll>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <prvProcessTimerOrBlockTask+0x98>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
}
 8004e60:	e001      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e62:	f7fe ff31 	bl	8003cc8 <xTaskResumeAll>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20012f14 	.word	0x20012f14
 8004e74:	20012f18 	.word	0x20012f18
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <prvGetNextExpireTime+0x44>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <prvGetNextExpireTime+0x16>
 8004e8e:	2201      	movs	r2, #1
 8004e90:	e000      	b.n	8004e94 <prvGetNextExpireTime+0x18>
 8004e92:	2200      	movs	r2, #0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <prvGetNextExpireTime+0x44>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e001      	b.n	8004eb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20012f10 	.word	0x20012f10

08004ec4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ecc:	f7fe ff98 	bl	8003e00 <xTaskGetTickCount>
 8004ed0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <prvSampleTimeNow+0x3c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d205      	bcs.n	8004ee8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004edc:	f000 f91a 	bl	8005114 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eee:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <prvSampleTimeNow+0x3c>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20012f20 	.word	0x20012f20

08004f04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d812      	bhi.n	8004f50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e01b      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <prvInsertTimerInActiveList+0x7c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f7fd ffe0 	bl	8002f0e <vListInsert>
 8004f4e:	e012      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d206      	bcs.n	8004f66 <prvInsertTimerInActiveList+0x62>
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e007      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <prvInsertTimerInActiveList+0x80>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f7fd ffcc 	bl	8002f0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f76:	697b      	ldr	r3, [r7, #20]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20012f14 	.word	0x20012f14
 8004f84:	20012f10 	.word	0x20012f10

08004f88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f8e:	e0ae      	b.n	80050ee <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f2c0 80aa 	blt.w	80050ec <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd ffe9 	bl	8002f80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fae:	1d3b      	adds	r3, r7, #4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff87 	bl	8004ec4 <prvSampleTimeNow>
 8004fb6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	f200 8097 	bhi.w	80050ee <prvProcessReceivedCommands+0x166>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <prvProcessReceivedCommands+0x40>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08005065 	.word	0x08005065
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	080050c3 	.word	0x080050c3
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff1 	.word	0x08004ff1
 8004fe8:	08005065 	.word	0x08005065
 8004fec:	08005079 	.word	0x08005079
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	18d1      	adds	r1, r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005010:	f7ff ff78 	bl	8004f04 <prvInsertTimerInActiveList>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d069      	beq.n	80050ee <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05e      	beq.n	80050ee <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	441a      	add	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2300      	movs	r3, #0
 800503e:	2100      	movs	r1, #0
 8005040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005042:	f7ff fe21 	bl	8004c88 <xTimerGenericCommand>
 8005046:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d14f      	bne.n	80050ee <prvProcessReceivedCommands+0x166>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	61bb      	str	r3, [r7, #24]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005076:	e03a      	b.n	80050ee <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	617b      	str	r3, [r7, #20]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	18d1      	adds	r1, r2, r3
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050bc:	f7ff ff22 	bl	8004f04 <prvInsertTimerInActiveList>
					break;
 80050c0:	e015      	b.n	80050ee <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80050d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d2:	f7fd fdb5 	bl	8002c40 <vPortFree>
 80050d6:	e00a      	b.n	80050ee <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050ea:	e000      	b.n	80050ee <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <prvProcessReceivedCommands+0x188>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f107 0108 	add.w	r1, r7, #8
 80050f6:	2200      	movs	r2, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe f9c9 	bl	8003490 <xQueueReceive>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f af45 	bne.w	8004f90 <prvProcessReceivedCommands+0x8>
	}
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20012f18 	.word	0x20012f18

08005114 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800511a:	e048      	b.n	80051ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd ff23 	bl	8002f80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d02e      	beq.n	80051ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d90e      	bls.n	8005180 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800516e:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f7fd fec8 	bl	8002f0e <vListInsert>
 800517e:	e016      	b.n	80051ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005180:	2300      	movs	r3, #0
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff fd7c 	bl	8004c88 <xTimerGenericCommand>
 8005190:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	603b      	str	r3, [r7, #0]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1b1      	bne.n	800511c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <prvSwitchTimerLists+0xc0>)
 80051c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051c6:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <prvSwitchTimerLists+0xc4>)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20012f10 	.word	0x20012f10
 80051d8:	20012f14 	.word	0x20012f14

080051dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051e0:	f7fd fb48 	bl	8002874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051e4:	4b12      	ldr	r3, [pc, #72]	; (8005230 <prvCheckForValidListAndQueue+0x54>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11d      	bne.n	8005228 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ec:	4811      	ldr	r0, [pc, #68]	; (8005234 <prvCheckForValidListAndQueue+0x58>)
 80051ee:	f7fd fe3d 	bl	8002e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051f2:	4811      	ldr	r0, [pc, #68]	; (8005238 <prvCheckForValidListAndQueue+0x5c>)
 80051f4:	f7fd fe3a 	bl	8002e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <prvCheckForValidListAndQueue+0x60>)
 80051fa:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <prvCheckForValidListAndQueue+0x58>)
 80051fc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <prvCheckForValidListAndQueue+0x64>)
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <prvCheckForValidListAndQueue+0x5c>)
 8005202:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005204:	2200      	movs	r2, #0
 8005206:	210c      	movs	r1, #12
 8005208:	200a      	movs	r0, #10
 800520a:	f7fd ff4b 	bl	80030a4 <xQueueGenericCreate>
 800520e:	4603      	mov	r3, r0
 8005210:	4a07      	ldr	r2, [pc, #28]	; (8005230 <prvCheckForValidListAndQueue+0x54>)
 8005212:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <prvCheckForValidListAndQueue+0x54>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <prvCheckForValidListAndQueue+0x54>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4908      	ldr	r1, [pc, #32]	; (8005244 <prvCheckForValidListAndQueue+0x68>)
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fb24 	bl	8003870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005228:	f7fd fb54 	bl	80028d4 <vPortExitCritical>
}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20012f18 	.word	0x20012f18
 8005234:	20012ee8 	.word	0x20012ee8
 8005238:	20012efc 	.word	0x20012efc
 800523c:	20012f10 	.word	0x20012f10
 8005240:	20012f14 	.word	0x20012f14
 8005244:	080053a0 	.word	0x080053a0

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	; (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	; (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	; (800528c <__libc_init_array+0x44>)
 800525c:	f000 f84a 	bl	80052f4 <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	080053c8 	.word	0x080053c8
 8005284:	080053c8 	.word	0x080053c8
 8005288:	080053c8 	.word	0x080053c8
 800528c:	080053cc 	.word	0x080053cc

08005290 <memcpy>:
 8005290:	440a      	add	r2, r1
 8005292:	4291      	cmp	r1, r2
 8005294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	4770      	bx	lr
 800529c:	b510      	push	{r4, lr}
 800529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a6:	4291      	cmp	r1, r2
 80052a8:	d1f9      	bne.n	800529e <memcpy+0xe>
 80052aa:	bd10      	pop	{r4, pc}

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <strcpy>:
 80052bc:	4603      	mov	r3, r0
 80052be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052c2:	f803 2b01 	strb.w	r2, [r3], #1
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d1f9      	bne.n	80052be <strcpy+0x2>
 80052ca:	4770      	bx	lr

080052cc <strncat>:
 80052cc:	b530      	push	{r4, r5, lr}
 80052ce:	4604      	mov	r4, r0
 80052d0:	7825      	ldrb	r5, [r4, #0]
 80052d2:	4623      	mov	r3, r4
 80052d4:	3401      	adds	r4, #1
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	d1fa      	bne.n	80052d0 <strncat+0x4>
 80052da:	3a01      	subs	r2, #1
 80052dc:	d304      	bcc.n	80052e8 <strncat+0x1c>
 80052de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e2:	f803 4b01 	strb.w	r4, [r3], #1
 80052e6:	b904      	cbnz	r4, 80052ea <strncat+0x1e>
 80052e8:	bd30      	pop	{r4, r5, pc}
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d1f5      	bne.n	80052da <strncat+0xe>
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e7f3      	b.n	80052da <strncat+0xe>
	...

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
